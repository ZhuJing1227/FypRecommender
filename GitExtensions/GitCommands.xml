<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GitCommands</name>
    </assembly>
    <members>
        <member name="T:GitCommands.IAppTitleGenerator">
            <summary>
            Provides the ability to generate application title.
            </summary>
        </member>
        <member name="M:GitCommands.IAppTitleGenerator.Generate(System.String,System.Boolean,System.String)">
            <summary>
            Generates main window title according to given repository.
            </summary>
            <param name="workingDir">Path to repository.</param>
            <param name="isValidWorkingDir">Indicates whether the given path contains a valid repository.</param>
            <param name="branchName">Current branch name.</param>
        </member>
        <member name="T:GitCommands.AppTitleGenerator">
            <summary>
            Generates application title.
            </summary>
        </member>
        <member name="M:GitCommands.AppTitleGenerator.Generate(System.String,System.Boolean,System.String)">
            <summary>
            Generates main window title according to given repository.
            </summary>
            <param name="workingDir">Path to repository.</param>
            <param name="isValidWorkingDir">Indicates whether the given path contains a valid repository.</param>
            <param name="branchName">Current branch name.</param>
        </member>
        <member name="T:GitCommands.ArgumentBuilderExtensions">
            <summary>
            Extension methods for working with <see cref="T:GitExtUtils.ArgumentBuilder"/>.
            </summary>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,System.Boolean,System.String)">
            <summary>
            Adds <paramref name="ifConditionTrue"/> to the argument list if <paramref name="condition"/>
            is <c>true</c>.
            </summary>
            <remarks>
            If <paramref name="ifConditionTrue"/> is <c>null</c> or white-space, then no change is made
            to the argument list, regardless of the value of <paramref name="condition"/>.
            </remarks>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="condition">Whether or not to add <paramref name="ifConditionTrue"/> to the argument list.</param>
            <param name="ifConditionTrue">The string to add if <paramref name="condition"/> is <c>true</c>.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,System.Boolean,System.String,System.String)">
            <summary>
            Adds either <paramref name="ifConditionTrue"/> or <paramref name="ifConditionFalse"/> to the
            argument list, depending upon the value of <paramref name="condition"/>.
            </summary>
            <remarks>
            If <paramref name="ifConditionTrue"/> is <c>null</c> or white-space, then no change is made
            to the argument list, regardless of the value of <paramref name="condition"/>.
            </remarks>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="condition">Whether or not to add <paramref name="ifConditionTrue"/> to the argument list.</param>
            <param name="ifConditionTrue">The string to add if <paramref name="condition"/> is <c>true</c>.</param>
            <param name="ifConditionFalse">The string to add if <paramref name="condition"/> is <c>false</c>.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Adds all non-<c>null</c> <paramref name="values"/> to the argument list.
             </summary>
             <remarks>
             <para>If <paramref name="values"/> is <c>null</c> or empty, then no change is made to the argument list.</para>
            
             <para>Any <c>null</c> values in the enumeration will be skipped, which can be convenient in calling constructions.</para>
             </remarks>
             <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
             <param name="values">A sequence of strings to add.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Adds all non-<c>null</c> <paramref name="ifConditionTrue"/> values to the argument list if <paramref name="condition"/>
             is <c>true</c>.
             </summary>
             <remarks>
             <para>If <paramref name="ifConditionTrue"/> is <c>null</c> or empty, then no change is made
             to the argument list, regardless of the value of <paramref name="condition"/>.</para>
            
             <para>Any <c>null</c> values in the enumeration will be skipped, which can be convenient in calling constructions.</para>
             </remarks>
             <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
             <param name="condition">Whether or not to add <paramref name="ifConditionTrue"/> to the argument list.</param>
             <param name="ifConditionTrue">A sequence of strings to add if <paramref name="condition"/> is <c>true</c>.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,GitCommands.Git.ForcePushOptions)">
            <summary>
            Adds the git argument syntax for members of the <see cref="T:GitCommands.Git.ForcePushOptions"/> enum.
            </summary>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="option">The enum member to add to the builder.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,GitCommands.UntrackedFilesMode)">
            <summary>
            Adds the git argument syntax for members of the <see cref="T:GitCommands.UntrackedFilesMode"/> enum.
            </summary>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="mode">The enum member to add to the builder.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,GitCommands.IgnoreSubmodulesMode)">
            <summary>
            Adds the git argument syntax for members of the <see cref="T:GitCommands.IgnoreSubmodulesMode"/> enum.
            </summary>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="mode">The enum member to add to the builder.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,GitCommands.CleanMode)">
            <summary>
            Adds the git argument syntax for members of the <see cref="T:GitCommands.CleanMode"/> enum.
            </summary>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="mode">The enum member to add to the builder.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,GitCommands.ResetMode)">
            <summary>
            Adds the git argument syntax for members of the <see cref="T:GitCommands.ResetMode"/> enum.
            </summary>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="mode">The enum member to add to the builder.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,GitCommands.Git.GitBisectOption)">
            <summary>
            Adds the git argument syntax for members of the <see cref="T:GitCommands.Git.GitBisectOption"/> enum.
            </summary>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="option">The enum member to add to the builder.</param>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,GitUIPluginInterfaces.ObjectId)">
            <summary>
            Adds <paramref name="objectId"/> as a SHA-1 argument.
            </summary>
            <remarks>
            If <paramref name="objectId"/> is <c>null</c> then no change is made to the arguments.
            </remarks>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="objectId">The SHA-1 object ID to add to the builder, or <c>null</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="objectId"/> represents an artificial commit.</exception>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.Add(GitExtUtils.ArgumentBuilder,System.Collections.Generic.IEnumerable{GitUIPluginInterfaces.ObjectId})">
            <summary>
            Adds a sequence of <paramref name="objectIds"/> to the builder.
            </summary>
            <remarks>
            If <paramref name="objectIds"/> is <c>null</c> then no change is made to the arguments.
            </remarks>
            <param name="builder">The <see cref="T:GitExtUtils.ArgumentBuilder"/> to add arguments to.</param>
            <param name="objectIds">A sequence of SHA-1 object IDs to add to the builder, or <c>null</c>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="objectIds"/> contains an artificial commit.</exception>
        </member>
        <member name="M:GitCommands.ArgumentBuilderExtensions.BuildBatchArguments(GitExtUtils.ArgumentBuilder,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Split arguments exceeding max length into multiple batches.
            Windows by default limit arguments length less than 32767 <see cref="F:System.Int16.MaxValue"/>.
            Implementation by <see cref="T:System.Diagnostics.Process"/> will have file path included in command line arguments,
            as well as added quotation and space characters, so we need base length to account for all these added characters
            <see href="https://referencesource.microsoft.com/#system/services/monitoring/system/diagnosticts/Process.cs,1944"/>
            </summary>
            <param name="builder">Argument builder instance.</param>
            <param name="arguments">Arguments.</param>
            <param name="baseLength">Base executable file and command line length.</param>
            <param name="maxLength">Command line max length. Default is 32767 - 1 on Windows.</param>
            <returns>Array of batch arguments split by max length.</returns>
        </member>
        <member name="P:GitCommands.AsyncLoader.Delay">
            <summary>
            Gets and sets an amount of time to delay calling <c>loadContent</c> actions after a call to one of the <c>Load</c> overloads.
            </summary>
            <remarks>
            Defaults to <see cref="F:System.TimeSpan.Zero"/>.
            </remarks>
        </member>
        <member name="T:GitCommands.BatchArgumentItem">
            <summary>
            Result model for batch processing arguments and count of items for batch progress
            </summary>
        </member>
        <member name="P:GitCommands.BatchArgumentItem.Argument">
            <summary>
            Batch command line argument
            </summary>
        </member>
        <member name="P:GitCommands.BatchArgumentItem.BatchItemsCount">
            <summary>
            Count of items in batch, used for batch progress update
            </summary>
        </member>
        <member name="P:GitCommands.CommitData.Body">
            <summary>
            Gets and sets the commit message.
            </summary>
        </member>
        <member name="M:GitCommands.ICommitDataManager.CreateFromRevision(GitUIPluginInterfaces.GitRevision,System.Collections.Generic.IReadOnlyList{GitUIPluginInterfaces.ObjectId})">
            <summary>
            Converts a <see cref="T:GitUIPluginInterfaces.GitRevision"/> object into a <see cref="T:GitCommands.CommitData"/>.
            </summary>
            <remarks>
            The <see cref="T:GitUIPluginInterfaces.GitRevision"/> object contains all required fields, so no additional
            data lookup is required to populate the returned <see cref="T:GitCommands.CommitData"/> object.
            </remarks>
            <param name="revision">The <see cref="T:GitUIPluginInterfaces.GitRevision"/> to convert from.</param>
            <param name="children">The list of children to add to the returned object.</param>
        </member>
        <member name="M:GitCommands.ICommitDataManager.GetCommitData(System.String,System.String@,System.Boolean)">
            <summary>
            Gets <see cref="T:GitCommands.CommitData"/> for the specified <paramref name="commitId"/>.
            </summary>
            <param name="commitId">The sha or Git reference.</param>
            <param name="error">error message for the Git command</param>
            <param name="cache">Allow caching of the Git command, should only be used if commitId is a sha and Notes are not used.</param>
        </member>
        <member name="M:GitCommands.ICommitDataManager.UpdateBody(GitCommands.CommitData,System.String@)">
            <summary>
            Updates the <see cref="P:GitCommands.CommitData.Body"/> (commit message) property of <paramref name="commitData"/>.
            </summary>
        </member>
        <member name="M:GitCommands.CommitDataManager.UpdateBody(GitCommands.CommitData,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.CommitDataManager.GetCommitData(System.String,System.String@,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.CommitDataManager.CreateFromFormattedData(System.String)">
            <summary>
            Parses <paramref name="data"/> into a <see cref="T:GitCommands.CommitData"/> object.
            </summary>
            <param name="data">Data produced by a <c>git log</c> or <c>git show</c> command where <c>--format</c>
            was provided the string <see cref="F:GitCommands.CommitDataManager.CommitDataFormat"/>.</param>
            <returns>CommitData object populated with parsed info from git string.</returns>
        </member>
        <member name="M:GitCommands.CommitDataManager.CreateFromRevision(GitUIPluginInterfaces.GitRevision,System.Collections.Generic.IReadOnlyList{GitUIPluginInterfaces.ObjectId})">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.ICommitMessageManager.AmendState">
            <summary>
            Reads/stores whether the previous commit shall be amended (if AppSettings.RememberAmendCommitState).
            </summary>
        </member>
        <member name="P:GitCommands.ICommitMessageManager.CommitMessagePath">
            <summary>
            The path of .git/COMMITMESSAGE, where a prepared (non-merge) commit message is stored.
            </summary>
        </member>
        <member name="P:GitCommands.ICommitMessageManager.IsMergeCommit">
            <summary>
            Returns whether .git/MERGE_MSG exists.
            </summary>
        </member>
        <member name="P:GitCommands.ICommitMessageManager.MergeMessagePath">
            <summary>
            The path of .git/MERGE_MSG, where a merge-commit message is stored.
            </summary>
        </member>
        <member name="P:GitCommands.ICommitMessageManager.MergeOrCommitMessage">
            <summary>
            Reads/stores the prepared commit message from/in .git/MERGE_MSG if it exists or else in .git/COMMITMESSAGE.
            </summary>
        </member>
        <member name="M:GitCommands.ICommitMessageManager.ResetCommitMessage">
            <summary>
            Deletes .git/COMMITMESSAGE and the file with the AmendState.
            </summary>
        </member>
        <member name="M:GitCommands.ICommitMessageManager.WriteCommitMessageToFile(System.String,GitCommands.CommitMessageType,System.Boolean,System.Boolean)">
            <summary>
             Writes the provided commit message to .git/COMMITMESSAGE.
             The message is formatted depending whether a commit template is used or whether the 2nd line must be empty.
            </summary>
            <param name="commitMessage">The commit message to write out.</param>
            <param name="messageType">The type of message to write out.</param>
            <param name="usingCommitTemplate">The indicator whether a commit tempate is used.</param>
            <param name="ensureCommitMessageSecondLineEmpty">The indicator whether empty second line is enforced.</param>
        </member>
        <member name="P:GitCommands.CommitMessageManager.AmendState">
            <inheritdoc/>
        </member>
        <member name="P:GitCommands.CommitMessageManager.CommitMessagePath">
            <inheritdoc/>
        </member>
        <member name="P:GitCommands.CommitMessageManager.IsMergeCommit">
            <inheritdoc/>
        </member>
        <member name="P:GitCommands.CommitMessageManager.MergeMessagePath">
            <inheritdoc/>
        </member>
        <member name="P:GitCommands.CommitMessageManager.MergeOrCommitMessage">
            <inheritdoc/>
        </member>
        <member name="M:GitCommands.CommitMessageManager.ResetCommitMessage">
            <inheritdoc/>
        </member>
        <member name="M:GitCommands.CommitMessageManager.WriteCommitMessageToFile(System.String,GitCommands.CommitMessageType,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:GitCommands.ICommitTemplateManager.RegisteredTemplates">
            <summary>
            Gets the collection of all currently registered commit templates provided by plugins.
            </summary>
        </member>
        <member name="M:GitCommands.ICommitTemplateManager.LoadGitCommitTemplate">
            <summary>
            Loads commit template from the file specified in .git/config
            under <c>commit.template</c> setting.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">The specified template file cannot be found.</exception>
            <returns>The commit template, if it is specified; otherwise <see langword="null"/>.</returns>
            <remarks>
            Template file can be set by the following command:
            <c>$ git config --global commit.template ~/.git_commit_msg.txt</c>
            </remarks>
        </member>
        <member name="M:GitCommands.ICommitTemplateManager.Register(System.String,System.Func{System.String},System.Drawing.Image)">
            <summary>
            Allows a plugin to register a new commit template.
            </summary>
            <param name="templateName">The name of the template.</param>
            <param name="templateText">The body of the template.</param>
        </member>
        <member name="M:GitCommands.ICommitTemplateManager.Unregister(System.String)">
            <summary>
            Allows a plugin to unregister a commit template.
            </summary>
            <param name="templateName">The name of the template.</param>
        </member>
        <member name="P:GitCommands.CommitTemplateManager.RegisteredTemplates">
            <summary>
            Gets the collection of all currently registered commit templates provided by plugins.
            </summary>
        </member>
        <member name="M:GitCommands.CommitTemplateManager.LoadGitCommitTemplate">
            <summary>
            Loads commit template from the file specified in .git/config
            under <c>commit.template</c> setting.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">The specified template file cannot be found.</exception>
            <returns>The commit template, if it is specified; otherwise <see langword="null"/>.</returns>
            <remarks>
            Template file can be set by the following command:
            <c>$ git config --global commit.template ~/.git_commit_msg.txt</c>
            </remarks>
        </member>
        <member name="M:GitCommands.CommitTemplateManager.Register(System.String,System.Func{System.String},System.Drawing.Image)">
            <summary>
            Allows a plugin to register a new commit template.
            </summary>
            <param name="templateName">The name of the template.</param>
            <param name="templateText">The body of the template.</param>
        </member>
        <member name="M:GitCommands.CommitTemplateManager.Unregister(System.String)">
            <summary>
            Allows a plugin to unregister a commit template.
            </summary>
            <param name="templateName">The name of the template.</param>
        </member>
        <member name="T:GitCommands.Config.ConfigSection">
             <summary>
               ConfigSection
               Sections can be defined as:
               [section "subsection"] (subsection is case sensitive)
               or
               [section.subsection] (subsection is case insensitive)
            
               Case insensitive sections are deprecated. Dot separated subsections are treated
               as case insensitive only when loaded from config file. Dot separated subsections
               added from code, are treated as case sensitive.
             </summary>
        </member>
        <member name="T:GitCommands.Config.SettingKeyString">
            <summary>
            Defines the strings to access certain git config settings.
            Goal is to eliminate duplicate string constants in the code.
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.BranchRemote">
            <summary>
            "branch.{0}.remote"
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.CredentialHelper">
            <summary>
            "credential.helper"
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.RemotePush">
            <summary>
            "remote.{0}.push"
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.RemotePushUrl">
            <summary>
            "remote.{0}.pushurl"
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.RemoteUrl">
            <summary>
            "remote.{0}.url"
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.RemotePuttySshKey">
            <summary>
            "remote.{0}.puttykeyfile"
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.UserName">
            <summary>
            user.name
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.UserEmail">
            <summary>
            user.email
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.DiffToolKey">
            <summary>
            diff.guitool
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.MergeToolKey">
            <summary>
            merge.guitool, requires Git 2.20.0
            </summary>
        </member>
        <member name="F:GitCommands.Config.SettingKeyString.MergeToolNoGuiKey">
            <summary>
            merge.tool
            </summary>
        </member>
        <member name="M:GitCommands.CustomDiffMergeToolCache.Clear">
            <summary>
            Clear the existing caches
            </summary>
        </member>
        <member name="M:GitCommands.CustomDiffMergeToolCache.GetToolsAsync(GitCommands.GitModule,System.Int32)">
            <summary>
            Load the availble DiffMerge tools and apply to the menus
            </summary>
            <param name="module">The Git module</param>
            <param name="delay">The delay before starting the operation</param>
        </member>
        <member name="M:GitCommands.CustomDiffMergeToolCache.ParseCustomDiffMergeTool(System.String,System.String)">
            <summary>
            Parse the output from 'git difftool --tool-help'.
            </summary>
            <param name="output">The output string.</param>
            <returns>list with tool names.</returns>
        </member>
        <member name="F:GitCommands.DateTimeUtils.UnixEpoch">
            <summary>
            Midnight 1 January 1970.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.Araxis.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Araxis.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Araxis.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Araxis.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.BeyondCompare3.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.BeyondCompare3.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.BeyondCompare3.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.BeyondCompare4.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.BeyondCompare4.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.BeyondCompare4.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMerge.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMerge.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMerge.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMerge.SearchPaths">
            <inheritdoc />
        </member>
        <member name="T:GitCommands.DiffMergeTools.DiffMergeTool">
            <summary>
            A base class for diff/merge tool configurations.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMergeTool.DiffCommand">
            <summary>
            Gets the diff command will be invoked by git.
            <see langword="null"/> or <see cref="F:System.String.Empty"/> if <see cref="P:GitCommands.DiffMergeTools.DiffMergeTool.IsDiffTool"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMergeTool.ExeFileName">
            <summary>
            Gets the diff/merge exe file name.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMergeTool.IsDiffTool">
            <summary>
            Indicates whether the tool can be used as a diff tool.
            Default: <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMergeTool.IsMergeTool">
            <summary>
            Indicates whether the tool can be used as a merge tool.
            Default: <see langword="true"/>.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMergeTool.MergeCommand">
            <summary>
            Gets the merge command will be invoked by git.
            <see langword="null"/> or <see cref="F:System.String.Empty"/> if <see cref="P:GitCommands.DiffMergeTools.DiffMergeTool.IsMergeTool"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMergeTool.Name">
            <summary>
            Gets the name of the diff/merge tool that will be shown to the user.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMergeTool.SearchPaths">
            <summary>
            Gets the list of possible locations of the diff/merge tool.
            These location will be used to help the user to automatically locate the tool.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMergeToolConfigurationManager.ConfiguredDiffTool">
            <summary>
            Gets the diff tool configured in the effective config under 'diff.guitool'.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.DiffMergeToolConfigurationManager.ConfiguredMergeTool">
            <summary>
            Gets the merge tool configured in the effective config under 'merge.guitool' or 'merge.tool'.
            </summary>
        </member>
        <member name="M:GitCommands.DiffMergeTools.DiffMergeToolConfigurationManager.ConfigureDiffMergeTool(System.String,GitCommands.DiffMergeTools.DiffMergeToolType,System.String,System.String)">
            <summary>
            Configures diff/merge tool.
            </summary>
            <param name="toolName">The name of the diff/merge tool.</param>
            <param name="toolType">Type of the tool.</param>
            <param name="toolPath">The location of the tool's executable.</param>
            <param name="toolCommand">The command.</param>
        </member>
        <member name="M:GitCommands.DiffMergeTools.DiffMergeToolConfigurationManager.GetToolCommand(System.String,GitCommands.DiffMergeTools.DiffMergeToolType)">
            <summary>
            Gets the command for the diff/merge tool configured in the effective config.
            </summary>
            <param name="toolName">The name of the diff/merge tool.</param>
            <param name="toolType">Type of the tool.</param>
            <returns>The command for the diff/merge tool configured in the effective config. </returns>
        </member>
        <member name="M:GitCommands.DiffMergeTools.DiffMergeToolConfigurationManager.GetToolPath(System.String,GitCommands.DiffMergeTools.DiffMergeToolType)">
            <summary>
            Gets the path to the diff/merge tool configured in the effective config.
            </summary>
            <param name="toolName">The name of the diff/merge tool.</param>
            <param name="toolType">Type of the tool.</param>
            <returns>The path to the diff/merge tool configured in the effective config. </returns>
        </member>
        <member name="M:GitCommands.DiffMergeTools.DiffMergeToolConfigurationManager.UnsetCurrentTool(GitCommands.DiffMergeTools.DiffMergeToolType)">
            <summary>
            Unset currently configured diff/merge tool.
            </summary>
            <param name="toolType">Type of the tool.</param>
        </member>
        <member name="P:GitCommands.DiffMergeTools.Kdiff3.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Kdiff3.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Kdiff3.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Kdiff3.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Meld.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Meld.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Meld.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Meld.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.P4Merge.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.P4Merge.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.P4Merge.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.P4Merge.SearchPaths">
            <inheritdoc />
        </member>
        <member name="T:GitCommands.DiffMergeTools.RegisteredDiffMergeTools">
            <summary>
            A dictionary of all configured diff/merge tools.
            </summary>
        </member>
        <member name="M:GitCommands.DiffMergeTools.RegisteredDiffMergeTools.All(GitCommands.DiffMergeTools.DiffMergeToolType)">
            <summary>
            Gets the collection of all configured diff/merge tools.
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.SemanticMerge.DiffCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.SemanticMerge.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.SemanticMerge.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.SemanticMerge.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.SemanticMerge.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Smerge.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Smerge.DiffCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Smerge.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Smerge.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.Smerge.SearchPaths">
            <inheritdoc />
        </member>
        <member name="T:GitCommands.DiffMergeTools.TortoiseDiff">
            <summary>
            Alias for name 'tortoisemerge' as Git disables difftools with that name:
            https://github.com/git/git/pull/471#issuecomment-660205096
            </summary>
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseDiff.IsDiffTool">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseDiff.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitIDiff.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitIDiff.IsMergeTool">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitIDiff.DiffCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitIDiff.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitIDiff.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitMerge.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitMerge.IsDiffTool">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitMerge.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitMerge.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.TortoiseGitMerge.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.VsCode.DiffCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.VsCode.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.VsCode.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.VsCode.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.VsCode.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.VsDiffMerge.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.VsDiffMerge.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.VsDiffMerge.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.VsDiffMerge.SearchPaths">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.WinMerge.DiffCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.WinMerge.ExeFileName">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.WinMerge.MergeCommand">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.WinMerge.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.DiffMergeTools.WinMerge.SearchPaths">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.IEnvironmentAbstraction.Exit(System.Int32)">
            <inheritdoc cref="M:System.Environment.Exit(System.Int32)" />
        </member>
        <member name="M:GitCommands.IEnvironmentAbstraction.GetCommandLineArgs">
            <inheritdoc cref="M:System.Environment.GetCommandLineArgs" />
        </member>
        <member name="M:GitCommands.IEnvironmentAbstraction.GetEnvironmentVariable(System.String)">
            <inheritdoc cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
        </member>
        <member name="M:GitCommands.IEnvironmentAbstraction.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
            <inheritdoc cref="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)" />
        </member>
        <member name="M:GitCommands.IEnvironmentAbstraction.GetFolderPath(System.Environment.SpecialFolder)">
            <inheritdoc cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)" />
        </member>
        <member name="M:GitCommands.IEnvironmentAbstraction.SetEnvironmentVariable(System.String,System.String)">
            <inheritdoc cref="M:System.Environment.SetEnvironmentVariable(System.String,System.String)" />
        </member>
        <member name="M:GitCommands.EnvironmentAbstraction.Exit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.EnvironmentAbstraction.GetCommandLineArgs">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.EnvironmentAbstraction.GetEnvironmentVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.EnvironmentAbstraction.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.EnvironmentAbstraction.GetFolderPath(System.Environment.SpecialFolder)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.EnvironmentAbstraction.SetEnvironmentVariable(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.IEnvironmentPathsProvider.GetEnvironmentPaths">
            <summary>
            Gets the list of paths defined under %PATH% environment variable.
            </summary>
            <returns>The list of paths defined under %PATH% environment variable.</returns>
        </member>
        <member name="M:GitCommands.IEnvironmentPathsProvider.GetEnvironmentValidPaths">
            <summary>
            Gets the list of valid paths defined under %PATH% environment variable.
            </summary>
            <returns>The list of valid paths defined under %PATH% environment variable.</returns>
        </member>
        <member name="M:GitCommands.EnvironmentPathsProvider.GetEnvironmentPaths">
            <summary>
            Gets the list of paths defined under %PATH% environment variable.
            </summary>
            <returns>The list of paths defined under %PATH% environment variable.</returns>
        </member>
        <member name="M:GitCommands.EnvironmentPathsProvider.GetEnvironmentValidPaths">
            <summary>
            Gets the list of valid paths defined under %PATH% environment variable.
            </summary>
            <returns>The list of valid paths defined under %PATH% environment variable.</returns>
        </member>
        <member name="T:GitCommands.ExternalLinks.IConfiguredLinkDefinitionsProvider">
            <summary>
            Provides the ability to retrieves available persisted external link definitions.
            </summary>
        </member>
        <member name="M:GitCommands.ExternalLinks.IConfiguredLinkDefinitionsProvider.Get(GitCommands.Settings.RepoDistSettings)">
            <summary>
            Loads all persisted external link definitions across all setting layers.
            </summary>
        </member>
        <member name="T:GitCommands.ExternalLinks.ConfiguredLinkDefinitionsProvider">
            <summary>
            Retrieves available persisted external link definitions.
            </summary>
        </member>
        <member name="M:GitCommands.ExternalLinks.ConfiguredLinkDefinitionsProvider.Get(GitCommands.Settings.RepoDistSettings)">
            <summary>
            Loads all persisted external link definitions across all setting layers.
            </summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.Enabled">
            <summary>
            Non-local link def can be locally disabled
            </summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.LinkFormats">
            <summary>
            List of formats to be applied for each revision part matched by SearchPattern
            </summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.Name">
            <summary>Short name for this link def</summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.NestedSearchPattern">
            <summary>
            RegEx for revision parts that have to be transformed into links
            empty string stands for unconditionally always added link
            </summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.RemoteSearchPattern">
            <summary>
            RegEx for remote parts that have to be transformed into links
            empty string stands for unconditionally always added link
            </summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.SearchPattern">
            <summary>
            RegEx for revision parts that have to be transformed into links
            empty string stands for unconditionally always added link
            </summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.UseRemotesPattern">
            <summary>
            RegEx for remotes that have to be use to search in
            empty string stands for an unconditionally use of the all remotes
            </summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.UseOnlyFirstRemote">
            <summary>Indicates if only the first among the matching remotes should be used</summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.SearchPatternRegex">
            <summary>Compiled SearchPattern</summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.NestedSearchPatternRegex">
            <summary>Compiled SearchPattern</summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.RemoteSearchPatternRegex">
            <summary>Compiled RemoteSearchPattern</summary>
        </member>
        <member name="P:GitCommands.ExternalLinks.ExternalLinkDefinition.UseRemotesRegex">
            <summary>Compiled UseRemotesPattern</summary>
        </member>
        <member name="M:GitCommands.ExternalLinks.ExternalLinksManager.Add(GitCommands.ExternalLinks.ExternalLinkDefinition)">
            <summary>
            Adds the provided definition at the lowest available level.
            </summary>
            <param name="definition">External link definition.</param>
        </member>
        <member name="M:GitCommands.ExternalLinks.ExternalLinksManager.AddRange(System.Collections.Generic.IEnumerable{GitCommands.ExternalLinks.ExternalLinkDefinition})">
            <summary>
            Adds the provided definitions at the lowest available level.
            </summary>
            <param name="definitions">External link definitions.</param>
        </member>
        <member name="M:GitCommands.ExternalLinks.ExternalLinksManager.Contains(System.String)">
            <summary>
            Checks if a definition with the supplied name exists in any level of available settings.
            </summary>
            <param name="definitionName">The name of the definition to find.</param>
            <returns><see langword="true"/> if a definition already exists; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:GitCommands.ExternalLinks.ExternalLinksManager.GetEffectiveSettings">
            <summary>
            Loads all settings from all available levels.
            </summary>
            <returns>A collection of all available definitions.</returns>
        </member>
        <member name="M:GitCommands.ExternalLinks.ExternalLinksManager.Remove(GitCommands.ExternalLinks.ExternalLinkDefinition)">
            <summary>
            Removes the supplied definition.
            </summary>
            <param name="definition">External link definition.</param>
        </member>
        <member name="M:GitCommands.ExternalLinks.ExternalLinksManager.Save">
            <summary>
            Saves the provided external link definitions to the settings.
            </summary>
        </member>
        <member name="M:GitCommands.ExternalLinks.IExternalLinksStorage.Load(GitCommands.Settings.RepoDistSettings)">
            <summary>
            Loads external link definitions from the settings.
            </summary>
        </member>
        <member name="M:GitCommands.ExternalLinks.IExternalLinksStorage.Save(GitCommands.Settings.RepoDistSettings,System.Collections.Generic.IReadOnlyList{GitCommands.ExternalLinks.ExternalLinkDefinition})">
            <summary>
            Saves the provided external link definitions to the settings.
            </summary>
        </member>
        <member name="M:GitCommands.ExternalLinks.ExternalLinksStorage.Load(GitCommands.Settings.RepoDistSettings)">
            <summary>
            Loads external link definitions from the settings.
            </summary>
        </member>
        <member name="M:GitCommands.ExternalLinks.ExternalLinksStorage.Save(GitCommands.Settings.RepoDistSettings,System.Collections.Generic.IReadOnlyList{GitCommands.ExternalLinks.ExternalLinkDefinition})">
            <summary>
            Saves the provided external link definitions to the settings.
            </summary>
        </member>
        <member name="T:GitCommands.IFileAssociatedIconProvider">
            <summary>
            Provides the ability to extract icons associated with file types.
            </summary>
        </member>
        <member name="M:GitCommands.IFileAssociatedIconProvider.Get(System.String,System.String)">
            <summary>
            Retrieves the icon associated with the given file type.
            </summary>
            <param name="workingDirectory">The git repository working directory.</param>
            <param name="relativeFilePath">The relative path to the file.</param>
            <returns>The icon associated with the given file type or <see langword="null"/>.</returns>
        </member>
        <member name="M:GitCommands.FileAssociatedIconProvider.Get(System.String,System.String)">
            <summary>
            Retrieves the icon associated with the given file type.
            The retrieved icons are cached by extensions.
            </summary>
            <param name="workingDirectory">The git repository working directory.</param>
            <param name="relativeFilePath">The relative path to the file.</param>
            <returns>The icon associated with the given file type or <see langword="null"/>.</returns>
            <remarks>
            The method takes two parameters to performance reasons - the full path is established
            only if the file type has not been processed already and the extensions is not cached.
            </remarks>
        </member>
        <member name="M:GitCommands.FileHelper.IsBinaryAccordingToGitAttributes(GitCommands.GitModule,System.String)">
            <returns>null if no info in .gitattributes (or ambiguous). True if marked as binary, false if marked as text</returns>
        </member>
        <member name="M:GitCommands.FileInfoExtensions.MakeFileTemporaryWritable(System.String,System.Action{System.String})">
            <summary>
              Remove all attributes that could cause the file to be read-only
              and restores them later
            </summary>
        </member>
        <member name="T:GitCommands.IFullPathResolver">
            <summary>
            Provides the ability to resolve full path.
            </summary>
        </member>
        <member name="M:GitCommands.IFullPathResolver.Resolve(System.String)">
            <summary>
            Resolves the provided path (folder or file) against the current working directory.
            </summary>
            <param name="path">Folder or file path to resolve.</param>
            <returns>
            <paramref name="path"/> if <paramref name="path"/> is rooted; otherwise resolved path from <see cref="P:GitUIPluginInterfaces.IGitModule.WorkingDir"/>.
            </returns>
        </member>
        <member name="M:GitCommands.FullPathResolver.Resolve(System.String)">
            <inheritdoc />
            <summary>
            Resolves the provided path (folder or file) against the current working directory.
            </summary>
            <remarks>
            Behaves similar to the .NET Core 2.1 version that do not throw on paths with illegal
            Windows characters (that could be OK in Git paths or for cross platform) but returns
            null instead of an possible path.</remarks>
            <param name="path">Folder or file path to resolve.</param>
            <returns>
            <paramref name="path" /> if <paramref name="path" /> is rooted; otherwise resolved path from working directory of the current repository.
            </returns>
            <exception cref="T:System.IO.PathTooLongException">The resolved path is too long (greater than 248 characters).</exception>
        </member>
        <member name="M:GitCommands.IGitRevisionInfoProvider.LoadChildren(GitUIPluginInterfaces.IGitItem)">
            <summary>
            Loads children item for the given <paramref name="item"/>.
            </summary>
            <returns>The item's children.</returns>
        </member>
        <member name="M:GitCommands.GitRevisionInfoProvider.LoadChildren(GitUIPluginInterfaces.IGitItem)">
            <summary>
            Loads children item for the given <paramref name="item"/>.
            </summary>
            <returns>The item's children.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:GitUIPluginInterfaces.IGitItem.Guid"/> is not supplied.</exception>
        </member>
        <member name="T:GitCommands.Git.Commands.GitCommand">
            <summary>
            Base class for structured git command
            here we can introduce methods which can operate on command structure
            instead of command string
            </summary>
        </member>
        <member name="P:GitCommands.Git.Commands.GitCommand.AccessesRemote">
            <value>Gets whether this command accesses a remote repository.</value>
        </member>
        <member name="P:GitCommands.Git.Commands.GitCommand.ChangesRepoState">
            <value>Gets whether executing this command will change the repo state.</value>
        </member>
        <member name="M:GitCommands.Git.Commands.GitCommand.Validate">
            <summary>
            Validates if the supplied arguments are correct.
            </summary>
        </member>
        <member name="M:GitCommands.Git.Commands.GitCommandHelpers.ResetCmd(GitCommands.ResetMode,System.String,System.String)">
            <summary>
            The Git command line for reset.
            </summary>
            <param name="mode">Reset mode.</param>
            <param name="commit">Optional commit-ish (for reset-index this is tree-ish and mandatory).</param>
            <param name="file">Optional file to reset.</param>
            <returns>Argument string.</returns>
        </member>
        <member name="M:GitCommands.Git.Commands.GitCommandHelpers.PushLocalCmd(System.String,GitUIPluginInterfaces.ObjectId,System.Boolean)">
            <summary>
            Push a local reference to a new commit
            This is similar to "git branch --force "branch" "commit", except that you get a warning if commits are lost.
            </summary>
            <param name="gitRef">The branch to move.</param>
            <param name="targetId">The commit to move to.</param>
            <param name="force">Push the reference also if commits are lost.</param>
            <returns>The Git command to execute.</returns>
        </member>
        <member name="M:GitCommands.Git.Commands.GitCommandHelpers.CloneCmd(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Git Clone.
            </summary>
            <param name="central">Makes a bare repo.</param>
            <param name="branch">
            <para><c>NULL</c>: do not checkout working copy (--no-checkout).</para>
            <para><c>""</c> (empty string): checkout remote HEAD (branch param omitted, default behavior for clone).</para>
            <para>(a non-empty string): checkout the given branch (--branch some_branch).</para>
            </param>
            <param name="depth">An int value for --depth param, or <c>NULL</c> to omit the param.</param>
            <param name="isSingleBranch">
            <para><c>True</c>: --single-branch.</para>
            <para><c>False</c>: --no-single-branch.</para>
            <para><c>NULL</c>: don't pass any such param to git.</para>
            </param>
            <param name="lfs">True to use the <c>git lfs clone</c> command instead of <c>git clone</c>.</param>
        </member>
        <member name="M:GitCommands.Git.Commands.GitCommandHelpers.CreateOrphanCmd(System.String,GitUIPluginInterfaces.ObjectId)">
            <summary>Create a new orphan branch from <paramref name="startPoint"/> and switch to it.</summary>
        </member>
        <member name="M:GitCommands.Git.Commands.GitCommandHelpers.RemoveCmd(System.Boolean,System.Boolean,System.String[])">
            <summary>Remove files from the working tree and from the index. <remarks>git rm</remarks></summary>
            <param name="force">Override the up-to-date check.</param>
            <param name="isRecursive">Allow recursive removal when a leading directory name is given.</param>
            <param name="files">Files to remove. File globs can be given to remove matching files.</param>
        </member>
        <member name="M:GitCommands.Git.Commands.GitCommandHelpers.PushMultipleCmd(System.String,System.Collections.Generic.IEnumerable{GitCommands.GitPushAction})">
            <summary>Pushes multiple sets of local branches to remote branches.</summary>
        </member>
        <member name="M:GitCommands.Git.Commands.GitCommandHelpers.CleanCmd(GitCommands.CleanMode,System.Boolean,System.Boolean,System.String)">
            <summary>
            Arguments for git-clean.
            </summary>
            <param name="mode">The cleanup mode what to delete.</param>
            <param name="dryRun">Only show what would be deleted.</param>
            <param name="directories">Delete untracked directories too.</param>
            <param name="paths">Limit to specific paths.</param>
        </member>
        <member name="M:GitCommands.Git.Commands.GitCreateTagArgs.#ctor(System.String,GitUIPluginInterfaces.ObjectId,GitCommands.Git.Tag.TagOperation,System.String,System.String,System.Boolean)">
            <summary>
            Creates arguments for creation of a tag.
            </summary>
            <param name="tagName">Name of tag</param>
            <param name="objectId">Commit revision to be tagged</param>
            <param name="operation">The operation to perform on the tag</param>
            <param name="tagMessage">Tag Message</param>
            <param name="signKeyId">Specific Key ID to be used instead of default one</param>
            <param name="force">Force parameter</param>
        </member>
        <member name="T:GitCommands.Git.Commands.GetRefsEnum">
            <summary>
            Enums requestable in GitRefs() (multiple names can be appended)
            Compare to <see ref="GitRefType"/> for actual values of parsed GitRefs
            </summary>
        </member>
        <member name="P:GitCommands.Git.FileDeleteException.FileName">
            <summary>
            Gets the name of the file which could not be deleted.
            </summary>
        </member>
        <member name="T:GitCommands.Git.GetAllChangedFilesOutputParser">
            <summary>
            Provides a parser for output of <see cref="M:GitCommands.Git.Commands.GitCommandHelpers.GetAllChangedFilesCmd(System.Boolean,GitCommands.UntrackedFilesMode,GitCommands.IgnoreSubmodulesMode,System.Boolean)"/> command.
            </summary>
        </member>
        <member name="M:GitCommands.Git.GetAllChangedFilesOutputParser.Parse(System.String)">
            <summary>
            Parse the output from git-status --porcelain=2 -z
            Note that the caller should check for fatal errors in the Git output
            </summary>
            <param name="getAllChangedFilesCommandOutput">An output of <see cref="M:GitCommands.Git.Commands.GitCommandHelpers.GetAllChangedFilesCmd(System.Boolean,GitCommands.UntrackedFilesMode,GitCommands.IgnoreSubmodulesMode,System.Boolean)"/> command.</param>
            <returns>list with the parsed GitItemStatus</returns>
            <seealso href="https://git-scm.com/docs/git-status"/>
        </member>
        <member name="M:GitCommands.Git.GetAllChangedFilesOutputParser.GetAllChangedFilesFromString_v1(System.String,System.Boolean,GitCommands.StagedStatus)">
            <summary>
            Parse git-status --porcelain=1 and git-diff --name-status
            Outputs are similar, except that git-status has status for both worktree and index
            </summary>
            <param name="getAllChangedFilesCommandOutput">An output of <see cref="M:GitCommands.Git.Commands.GitCommandHelpers.GetAllChangedFilesCmd(System.Boolean,GitCommands.UntrackedFilesMode,GitCommands.IgnoreSubmodulesMode,System.Boolean)"/> command.</param>
            <param name="fromDiff">Parse git-diff</param>
            <param name="staged">The staged status <see cref="T:GitCommands.GitItemStatus"/>, only relevant for git-diff (parsed for git-status)</param>
            <returns>list with the git items</returns>
        </member>
        <member name="M:GitCommands.Git.GetAllChangedFilesOutputParser.GetAllChangedFilesFromString_v2(System.String)">
            <summary>
            Parse the output from git-status --porcelain=2
            </summary>
            <param name="getAllChangedFilesCommandOutput">output from the git command</param>
            <returns>list with the parsed GitItemStatus</returns>
        </member>
        <member name="T:GitCommands.Git.IGitBranchNameNormaliser">
            <summary>
            Provides ability to ensure compliance with the GIT branch naming conventions.
            </summary>
        </member>
        <member name="M:GitCommands.Git.IGitBranchNameNormaliser.Normalise(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Ensures that the branch name meets the GIT branch naming conventions.
            For more details refer to <see href="https://git-scm.com/docs/git-check-ref-format"/>.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="options">The options.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="T:GitCommands.Git.GitBranchNameNormaliser">
            <summary>
            Ensures compliance with the GIT branch naming conventions.
            </summary>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Normalise(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Ensures that the branch name meets the GIT branch naming conventions.
            For more details refer to <see href="https://www.git-scm.com/docs/git-check-ref-format/1.8.2"/>.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="options">The options.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.IsValidChar(System.Char)">
            <summary>
            Indicates whether the given character can be used in a branch name.
            </summary>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Rule01(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Branch name can include slash '/' for hierarchical (directory) grouping,
            but no slash-separated component can begin with a dot '.' or end with the sequence '.lock'.
            </summary>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Rule03(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Branch name cannot have two consecutive dots '..' anywhere.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="options">The options.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Rule04(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Branch name cannot have ASCII control characters (i.e. bytes whose values are lower than \040, or \127 'DEL'),
            space, tilde '~', caret '^', or colon ':' anywhere.
            Also allow any valid Unicode letters.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="options">The options.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Rule05(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Branch name cannot have question-mark '?', asterisk '*', or open bracket '[' anywhere.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="options">The options.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Rule06(System.String)">
            <summary>
            Branch name begin or end with a slash '/' or contain multiple consecutive slashes.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Rule07(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Branch name end with a dot '.'.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="options">The options.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Rule08(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Branch name cannot contain a sequence '@{'.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="options">The options.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Rule09(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Branch name cannot be the single character '@'.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="options">The options.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="M:GitCommands.Git.GitBranchNameNormaliser.Rule10(System.String,GitCommands.Git.GitBranchNameOptions)">
            <summary>
            Branch name cannot contain a '\'.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="options">The options.</param>
            <returns>Normalised branch name.</returns>
        </member>
        <member name="T:GitCommands.Git.GitBranchNameOptions">
            <summary>
            Options used by <see cref="T:GitCommands.Git.GitBranchNameNormaliser"/> to ensures compliance with the GIT branch naming conventions.
            </summary>
        </member>
        <member name="P:GitCommands.Git.GitBranchNameOptions.ReplacementToken">
            <summary>
            Gets the character which will replace all invalid characters in git branch name.
            </summary>
            <seealso cref="T:GitCommands.Git.GitBranchNameNormaliser"/>.
        </member>
        <member name="M:GitCommands.Git.IGitDescribeProvider.Get(GitUIPluginInterfaces.ObjectId)">
            <summary>
            Runs <c>git describe</c> to find the most recent tag that is reachable from a commit.
            If the tag points to the commit, then only the tag is shown. Otherwise, it suffixes the tag name with the number
            of additional commits on top of the tagged object and the abbreviated object name of the most recent commit.
            </summary>
            <param name="revision">A revision to describe.</param>
            <returns>Describe information.</returns>
        </member>
        <member name="M:GitCommands.Git.GitDescribeProvider.Get(GitUIPluginInterfaces.ObjectId)">
            <inheritdoc />
        </member>
        <member name="T:GitCommands.Git.IGitDirectoryResolver">
            <summary>
            Provides the ability to resolve the location of .git folder.
            </summary>
        </member>
        <member name="M:GitCommands.Git.IGitDirectoryResolver.Resolve(System.String)">
            <summary>
            Resolves the .git folder for the given repository.
            </summary>
            <param name="repositoryPath">The repository working folder.</param>
            <returns>The resolved location of .git folder.</returns>
        </member>
        <member name="T:GitCommands.Git.GitDirectoryResolver">
            <summary>
            Resolves the location of .git folder.
            </summary>
        </member>
        <member name="M:GitCommands.Git.GitDirectoryResolver.Resolve(System.String)">
            <summary>
            Resolves the .git folder for the given repository.
            </summary>
            <param name="repositoryPath">The repository working folder.</param>
            <returns>
            The resolved location of .git folder.
            <list type="table">
              <item>
                <term>If <paramref name="repositoryPath"/> is an empty string</term>
                <description>it resolves to <see cref="F:System.String.Empty"/></description>
              </item>
              <item>
                <term>If <paramref name="repositoryPath"/> contains a .git file (i.e. the repository is a submodule)</term>
                <description>it resolves to the location of the submodule's .git folder under the superproject's .git folder with the trailing slash</description>
              </item>
              <item>
                <term>If <paramref name="repositoryPath"/> contains .git folder</term>
                <description>it resolves to the .git folder with the trailing slash</description>
              </item>
              <item>
                <term>else</term>
                <description>it returns <paramref name="repositoryPath"/> unchanged.</description>
              </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryPath"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GitCommands.Git.GitItemStatusFileExtensionComparer">
            <summary>
            Compares the file extension of <see cref="P:GitCommands.GitItemStatus.Name"/> and then by path/>.
            </summary>
        </member>
        <member name="T:GitCommands.Git.GitItemStatusNameComparer">
            <summary>
            Compares the file names/>.
            </summary>
        </member>
        <member name="T:GitCommands.Git.GitItemStatusNameEqualityComparer">
            <summary>
            Compares the file names/>.
            </summary>
        </member>
        <member name="M:GitCommands.Git.IGitRevisionTester.AllFirstAreParentsToSelected(System.Collections.Generic.IEnumerable{GitUIPluginInterfaces.ObjectId},GitUIPluginInterfaces.GitRevision)">
            <summary>
            Finds if all of the first selected are parents to the selected revision
            </summary>
            <param name="firstSelected">The first selected revisions (A)</param>
            <param name="selectedRevision">The currently (last) selected revision (B)</param>
            <returns>
            True if one of the first selected is parent
            </returns>
        </member>
        <member name="M:GitCommands.Git.IGitRevisionTester.AnyLocalFileExists(System.Collections.Generic.IEnumerable{GitCommands.GitItemStatus})">
            <summary>
            Finds if any of the git items exists as a file.
            </summary>
            <param name="selectedItemsWithParent">List of items to resolve and check</param>
            <returns>
            True if at least one file exists.
            </returns>
        </member>
        <member name="M:GitCommands.Git.GitRevisionTester.AllFirstAreParentsToSelected(System.Collections.Generic.IEnumerable{GitUIPluginInterfaces.ObjectId},GitUIPluginInterfaces.GitRevision)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Git.GitRevisionTester.AnyLocalFileExists(System.Collections.Generic.IEnumerable{GitCommands.GitItemStatus})">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Git.GitRevisionTester.Matches(GitUIPluginInterfaces.GitRevision,System.String)">
            <inheritdoc />
        </member>
        <member name="T:GitCommands.Git.GitStash">
            <summary>Stored local modifications.</summary>
        </member>
        <member name="P:GitCommands.Git.GitStash.Message">
            <summary>Short description of the commit the stash was based on.</summary>
        </member>
        <member name="P:GitCommands.Git.GitStash.Index">
            <summary>Gets the index of the stash in the list.</summary>
        </member>
        <member name="P:GitCommands.Git.GitStash.Name">
            <summary>Name of the stash.</summary>
            <remarks>"stash@{n}"</remarks>
        </member>
        <member name="M:GitCommands.Git.IIndexLockManager.IsIndexLocked">
            <summary>
            Determines whether the given repository has index.lock file.
            </summary>
            <returns><see langword="true"/> if index is locked; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:GitCommands.Git.IIndexLockManager.UnlockIndex(System.Boolean)">
            <summary>
            Delete index.lock in the current working folder.
            </summary>
            <param name="includeSubmodules">
                If <see langword="true"/> all submodules will be scanned for index.lock files and have them delete, if found.
            </param>
            <exception cref="T:GitCommands.Git.FileDeleteException">Unable to delete specific index.lock.</exception>
        </member>
        <member name="T:GitCommands.Git.IndexLockManager">
            <summary>
            Facilitates detection and deletion of index.lock files.
            </summary>
        </member>
        <member name="M:GitCommands.Git.IndexLockManager.IsIndexLocked">
            <summary>
            Determines whether the given repository has index.lock file.
            </summary>
            <returns><see langword="true"/> if index is locked; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:GitCommands.Git.IndexLockManager.UnlockIndex(System.Boolean)">
            <summary>
            Delete index.lock in the current working folder.
            </summary>
            <param name="includeSubmodules">
                If <see langword="true"/> all submodules will be scanned for index.lock files and have them delete, if found.
            </param>
            <exception cref="T:GitCommands.Git.FileDeleteException">Unable to delete specific index.lock.</exception>
        </member>
        <member name="M:GitCommands.Git.IRevisionDiffProvider.Get(System.String,System.String)">
            <summary>
            options to git-diff from GE arguments, including artificial commits
            </summary>
            <param name="firstRevision">The first revision, "A"</param>
            <param name="secondRevision">The second "current" revision, "B"</param>
        </member>
        <member name="M:GitCommands.Git.IRevisionDiffProvider.Get(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            options to git-diff from GE arguments, including artificial commits
            </summary>
            <param name="firstRevision">The first revision, "A"</param>
            <param name="secondRevision">The second "current" revision, "B"</param>
            <param name="fileName">The file to compare</param>
            <param name="oldFileName">The old name of the file</param>
            <param name="isTracked">The file is tracked</param>
        </member>
        <member name="T:GitCommands.Git.RevisionDiffProvider">
            <summary>
            Translate GitRevision including artificial commits to diff options
            Closely related to GitRevision.cs
            </summary>
        </member>
        <member name="M:GitCommands.Git.RevisionDiffProvider.Get(System.String,System.String)">
            <summary>
            options to git-diff from GE arguments, including artificial commits
            </summary>
            <param name="firstRevision">The first revision</param>
            <param name="secondRevision">The second "current" revision</param>
        </member>
        <member name="M:GitCommands.Git.RevisionDiffProvider.Get(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            options to git-diff from GE arguments, including artificial commits
            </summary>
            <param name="firstRevision">The first revision, "A"</param>
            <param name="secondRevision">The second "current" revision, "B"</param>
            <param name="fileName">The file to compare</param>
            <param name="oldFileName">The old name of the file</param>
            <param name="isTracked">The file is tracked</param>
        </member>
        <member name="M:GitCommands.Git.RevisionDiffProvider.ArtificialToDiffOptions(System.String)">
            <summary>
            Translate the revision string to an option string
            Artificial "commits" are options, handle aliases too
            (order and handling of empty arguments is not handled here)
            </summary>
        </member>
        <member name="M:GitCommands.Git.ISystemEncodingReader.Read">
            <summary>
            Checks whether Git Extensions works with standard msysgit or msysgit-unicode.
            </summary>
            <returns>System encoding.</returns>
        </member>
        <member name="M:GitCommands.Git.SystemEncodingReader.Read">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Git.Tag.IGitTagController.CreateTag(GitCommands.Git.Commands.GitCreateTagArgs,System.Windows.Forms.IWin32Window)">
            <summary>
            Create the Tag depending on input parameter.
            </summary>
            <param name="args">tag creation arguments</param>
            <param name="parentWindow">the UI window to act as the parent of the create tag dialog</param>
            <returns>the true if the tag is created.</returns>
        </member>
        <member name="M:GitCommands.Git.Tag.GitTagController.CreateTag(GitCommands.Git.Commands.GitCreateTagArgs,System.Windows.Forms.IWin32Window)">
            <summary>
            Create the Tag depending on input parameter.
            </summary>
            <param name="args">tag creation arguments</param>
            <param name="parentWindow">the UI window to act as the parent of the create tag dialog</param>
            <returns>the true if the tag is created.</returns>
        </member>
        <member name="T:GitCommands.BatchProgressEventArgs">
            <summary>
            Event arguments for batch progress updating
            </summary>
        </member>
        <member name="P:GitCommands.BatchProgressEventArgs.ProcessedCount">
            <summary>
            Number of items processed in this batch event
            </summary>
        </member>
        <member name="P:GitCommands.BatchProgressEventArgs.ExecutionResult">
            <summary>
            Batch execution result
            </summary>
        </member>
        <member name="T:GitCommands.CleanMode">
            <summary>Mode for 'git clean'</summary>
        </member>
        <member name="F:GitCommands.CleanMode.OnlyNonIgnored">
            <summary>Only untracked files not in .gitignore, the default. Git clean without either -x or -X option.</summary>
        </member>
        <member name="F:GitCommands.CleanMode.OnlyIgnored">
            <summary>Only files included in any ignore list (.gitignore, $GIT_DIR/info/exclude). Git clean with -X option.</summary>
        </member>
        <member name="F:GitCommands.CleanMode.All">
            <summary>All files not tracked by Git. Git clean with  -x option.</summary>
        </member>
        <member name="T:GitCommands.CommandCache">
            <summary>
            Caches a set of command output/error bytes, for the purpose of avoiding repeated
            process invocations when the results are known to be identical across operations.
            </summary>
            <remarks>
            <para>
            A bounded number of commands are cached. When that number is exceeded, least
            recently used commands are removed.
            </para>
            <para>
            Commands that don't change over time may be cached, e.g.
            <list type="bullet">
              <item>Commit data queried by commit ID, or</item>
              <item>Diffs between commit IDs.</item>
            </list>
            Commands that deal with changeable data should never be cached, e.g.
            <list type="bullet">
              <item>Refs, because they are moveable, or</item>
              <item>Commit notes, because they can change.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="E:GitCommands.CommandCache.Changed">
            <summary>
            Raised whenever the contents of the cache is changed.
            </summary>
        </member>
        <member name="M:GitCommands.CommandCache.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of <see cref="T:GitCommands.CommandCache"/> with specified <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The maximum number of commands to cache.</param>
        </member>
        <member name="M:GitCommands.CommandCache.GetCachedCommands">
            <summary>
            Gets the list of commands stored within the cache.
            </summary>
        </member>
        <member name="M:GitCommands.CommandCache.TryGet(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Looks up a command's output in the cache.
            </summary>
            <param name="cmd">The command to look for.</param>
            <param name="output">Stored output bytes of the command, if found.</param>
            <param name="error">Stored error bytes of the command, if found.</param>
            <returns><c>true</c> if the command was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GitCommands.CommandCache.Add(System.String,System.Byte[],System.Byte[])">
            <summary>
            Adds output and error bytes for a command.
            </summary>
            <param name="cmd">The command to add to the cache.</param>
            <param name="output">Output bytes of the command.</param>
            <param name="error">Error bytes of the command.</param>
        </member>
        <member name="F:GitCommands.EnvironmentConfiguration.UserHomeDir">
            <summary>
            The <c>USER</c> environment variable's value for the user/machine.
            </summary>
        </member>
        <member name="M:GitCommands.EnvironmentConfiguration.SetEnvironmentVariables">
            <summary>
            Sets <c>PATH</c>, <c>HOME</c>, <c>TERM</c> and <c>SSH_ASKPASS</c> environment variables
            for the current process.
            </summary>
        </member>
        <member name="M:GitCommands.EnvironmentConfiguration.GetHomeDir">
            <summary>
            Gets the value of the current process's <c>HOME</c> environment variable.
            </summary>
            <returns>The variable's value, or an empty string if it is not present.</returns>
        </member>
        <member name="T:GitCommands.Executable">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Executable.Start(GitCommands.ArgumentString,System.Boolean,System.Boolean,System.Boolean,System.Text.Encoding,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:GitCommands.Executable.ProcessWrapper">
            <summary>
            Manages the lifetime of a process. The <see cref="T:System.Diagnostics.Process"/> object has many members
            that throw at different times in the lifecycle of the process, such as after it is disposed. This class
            provides a simplified API that meets the need of this application via the <see cref="T:GitUIPluginInterfaces.IProcess"/> interface.
            </summary>
        </member>
        <member name="P:GitCommands.Executable.ProcessWrapper.StandardInput">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.Executable.ProcessWrapper.StandardOutput">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.Executable.ProcessWrapper.StandardError">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Executable.ProcessWrapper.WaitForInputIdle">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Executable.ProcessWrapper.WaitForExitAsync">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Executable.ProcessWrapper.WaitForExit">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Executable.ProcessWrapper.Dispose">
            <inheritdoc />
        </member>
        <member name="T:GitCommands.ExecutableExtensions">
            <summary>
            Provides extension methods for <see cref="T:GitUIPluginInterfaces.IExecutable"/> that provider operations on executables
            at a higher level than <see cref="M:GitUIPluginInterfaces.IExecutable.Start(GitCommands.ArgumentString,System.Boolean,System.Boolean,System.Boolean,System.Text.Encoding,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.GetOutput(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Byte[],System.Text.Encoding,GitCommands.CommandCache,System.Boolean)">
            <summary>
            Launches a process for the executable and returns its output.
            </summary>
            <remarks>
            This method uses <see cref="P:GitUI.ThreadHelper.JoinableTaskFactory"/> to allow the calling thread to
            do useful work while waiting for the process to exit. Internally, this method delegates to
            <see cref="M:GitCommands.ExecutableExtensions.GetOutputAsync(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Byte[],System.Text.Encoding,GitCommands.CommandCache,System.Boolean)"/>.
            </remarks>
            <param name="executable">The executable from which to launch a process.</param>
            <param name="arguments">The arguments to pass to the executable.</param>
            <param name="input">Bytes to be written to the process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="outputEncoding">The text encoding to use when decoding bytes read from the process's standard output and standard error streams, or <c>null</c> if the default encoding is to be used.</param>
            <param name="cache">A <see cref="T:GitCommands.CommandCache"/> to use if command results may be cached, otherwise <c>null</c>.</param>
            <param name="stripAnsiEscapeCodes">A flag indicating whether ANSI escape codes should be removed from output strings.</param>
            <returns>The concatenation of standard output and standard error. To receive these outputs separately, use <see cref="M:GitCommands.ExecutableExtensions.Execute(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Action{System.IO.StreamWriter},System.Text.Encoding,System.Boolean)"/> instead.</returns>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.GetBatchOutput(GitUIPluginInterfaces.IExecutable,System.Collections.Generic.ICollection{GitCommands.BatchArgumentItem},System.Byte[],System.Text.Encoding,GitCommands.CommandCache,System.Boolean)">
            <summary>
            Launches a process for the executable per batch item and returns its output.
            </summary>
            <remarks>
            This method uses <see cref="M:GitCommands.ExecutableExtensions.GetOutput(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Byte[],System.Text.Encoding,GitCommands.CommandCache,System.Boolean)"/> to get concatenated outputs of multiple commands in batch.
            </remarks>
            <param name="executable">The executable from which to launch processes.</param>
            <param name="batchArguments">The array of batch arguments to pass to the executable.</param>
            <param name="input">Bytes to be written to each process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="outputEncoding">The text encoding to use when decoding bytes read from each process's standard output and standard error streams, or <c>null</c> if the default encoding is to be used.</param>
            <param name="cache">A <see cref="T:GitCommands.CommandCache"/> to use if command results may be cached, otherwise <c>null</c>.</param>
            <param name="stripAnsiEscapeCodes">A flag indicating whether ANSI escape codes should be removed from output strings.</param>
            <returns>The concatenation of standard output and standard error. To receive these outputs separately, use <see cref="M:GitCommands.ExecutableExtensions.Execute(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Action{System.IO.StreamWriter},System.Text.Encoding,System.Boolean)"/> instead.</returns>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.GetOutputAsync(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Byte[],System.Text.Encoding,GitCommands.CommandCache,System.Boolean)">
            <summary>
            Launches a process for the executable and returns its output.
            </summary>
            <param name="executable">The executable from which to launch a process.</param>
            <param name="arguments">The arguments to pass to the executable.</param>
            <param name="input">Bytes to be written to the process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="outputEncoding">The text encoding to use when decoding bytes read from the process's standard output and standard error streams, or <c>null</c> if the default encoding is to be used.</param>
            <param name="cache">A <see cref="T:GitCommands.CommandCache"/> to use if command results may be cached, otherwise <c>null</c>.</param>
            <param name="stripAnsiEscapeCodes">A flag indicating whether ANSI escape codes should be removed from output strings.</param>
            <returns>A task that yields the concatenation of standard output and standard error. To receive these outputs separately, use <see cref="M:GitCommands.ExecutableExtensions.ExecuteAsync(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Action{System.IO.StreamWriter},System.Text.Encoding,System.Boolean)"/> instead.</returns>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.RunCommand(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Byte[],System.Boolean)">
            <summary>
            Launches a process for the executable and returns <c>true</c> if its exit code is zero.
            </summary>
            <remarks>
            This method uses <see cref="P:GitUI.ThreadHelper.JoinableTaskFactory"/> to allow the calling thread to
            do useful work while waiting for the process to exit. Internally, this method delegates to
            <see cref="M:GitCommands.ExecutableExtensions.RunCommandAsync(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Byte[],System.Boolean)"/>.
            </remarks>
            <param name="executable">The executable from which to launch a process.</param>
            <param name="arguments">The arguments to pass to the executable.</param>
            <param name="input">Bytes to be written to the process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="createWindow">A flag indicating whether a console window should be created and bound to the process.</param>
            <returns><c>true</c> if the process's exit code was zero, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.RunBatchCommand(GitUIPluginInterfaces.IExecutable,System.Collections.Generic.ICollection{GitCommands.BatchArgumentItem},System.Action{GitCommands.BatchProgressEventArgs},System.Byte[],System.Boolean)">
            <summary>
            Launches a process for the executable per batch item, and returns <c>true</c> if all process exit codes were zero.
            </summary>
            <remarks>
            This method uses <see cref="M:GitCommands.ExecutableExtensions.RunCommand(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Byte[],System.Boolean)"/> to execute multiple commands in batch, used in accordance with
            <see cref="M:GitCommands.ArgumentBuilderExtensions.BuildBatchArguments(GitExtUtils.ArgumentBuilder,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Int32)"/>
            to work around Windows command line length 32767 character limitation
            <see href="https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createprocessa"/>.
            </remarks>
            <param name="executable">The executable from which to launch processes.</param>
            <param name="batchArguments">The array of batch arguments to pass to the executable.</param>
            <param name="input">Bytes to be written to each process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="createWindow">A flag indicating whether a console window should be created and bound to each process.</param>
            <returns><c>true</c> if all process exit codes were zero, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.RunCommandAsync(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Byte[],System.Boolean)">
            <summary>
            Launches a process for the executable and returns <c>true</c> if its exit code is zero.
            </summary>
            <param name="executable">The executable from which to launch a process.</param>
            <param name="arguments">The arguments to pass to the executable.</param>
            <param name="input">Bytes to be written to the process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="createWindow">A flag indicating whether a console window should be created and bound to the process.</param>
            <returns>A task that yields <c>true</c> if the process's exit code was zero, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.GetOutputLines(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Byte[],System.Text.Encoding,System.Boolean)">
            <summary>
            Launches a process for the executable and returns output lines as they become available.
            </summary>
            <param name="executable">The executable from which to launch a process.</param>
            <param name="arguments">The arguments to pass to the executable.</param>
            <param name="input">Bytes to be written to the process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="outputEncoding">The text encoding to use when decoding bytes read from the process's standard output and standard error streams, or <c>null</c> if the default encoding is to be used.</param>
            <param name="stripAnsiEscapeCodes">A flag indicating whether ANSI escape codes should be removed from output strings.</param>
            <returns>An enumerable sequence of lines that yields lines as they become available. Lines from standard output are returned first, followed by lines from standard error.</returns>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.GetOutputLinesAsync(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Action{System.IO.StreamWriter},System.Text.Encoding,System.Boolean)">
            <summary>
            Launches a process for the executable and returns output lines as they become available.
            </summary>
            <param name="executable">The executable from which to launch a process.</param>
            <param name="arguments">The arguments to pass to the executable.</param>
            <param name="writeInput">A callback that writes bytes to the process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="outputEncoding">The text encoding to use when decoding bytes read from the process's standard output and standard error streams, or <c>null</c> if the default encoding is to be used.</param>
            <param name="stripAnsiEscapeCodes">A flag indicating whether ANSI escape codes should be removed from output strings.</param>
            <returns>An enumerable sequence of lines that yields lines as they become available. Lines from standard output are returned first, followed by lines from standard error.</returns>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.Execute(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Action{System.IO.StreamWriter},System.Text.Encoding,System.Boolean)">
            <summary>
            Launches a process for the executable and returns an object detailing exit code, standard output and standard error values.
            </summary>
            <remarks>
            This method uses <see cref="P:GitUI.ThreadHelper.JoinableTaskFactory"/> to allow the calling thread to
            do useful work while waiting for the process to exit. Internally, this method delegates to
            <see cref="M:GitCommands.ExecutableExtensions.ExecuteAsync(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Action{System.IO.StreamWriter},System.Text.Encoding,System.Boolean)"/>.
            </remarks>
            <param name="executable">The executable from which to launch a process.</param>
            <param name="arguments">The arguments to pass to the executable.</param>
            <param name="writeInput">A callback that writes bytes to the process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="outputEncoding">The text encoding to use when decoding bytes read from the process's standard output and standard error streams, or <c>null</c> if the default encoding is to be used.</param>
            <param name="stripAnsiEscapeCodes">A flag indicating whether ANSI escape codes should be removed from output strings.</param>
            <returns>An <see cref="T:GitUIPluginInterfaces.ExecutionResult"/> object that gives access to exit code, standard output and standard error values.</returns>
        </member>
        <member name="M:GitCommands.ExecutableExtensions.ExecuteAsync(GitUIPluginInterfaces.IExecutable,GitCommands.ArgumentString,System.Action{System.IO.StreamWriter},System.Text.Encoding,System.Boolean)">
            <summary>
            Launches a process for the executable and returns an object detailing exit code, standard output and standard error values.
            </summary>
            <param name="executable">The executable from which to launch a process.</param>
            <param name="arguments">The arguments to pass to the executable.</param>
            <param name="writeInput">A callback that writes bytes to the process's standard input stream, or <c>null</c> if no input is required.</param>
            <param name="outputEncoding">The text encoding to use when decoding bytes read from the process's standard output and standard error streams, or <c>null</c> if the default encoding is to be used.</param>
            <param name="stripAnsiEscapeCodes">A flag indicating whether ANSI escape codes should be removed from output strings.</param>
            <returns>A task that yields an <see cref="T:GitUIPluginInterfaces.ExecutionResult"/> object that gives access to exit code, standard output and standard error values.</returns>
        </member>
        <member name="T:GitCommands.ExternalOperationException">
            <summary>
            Represents errors that occur during execution of an external operation,
            e.g. running a git operation or launching an external process.
            </summary>
        </member>
        <member name="M:GitCommands.ExternalOperationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GitCommands.ExternalOperationException"/> class with a specified parameters
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="command">The command that led to the exception.</param>
            <param name="arguments">The command arguments.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="P:GitCommands.ExternalOperationException.Command">
            <summary>
            The command that led to the exception.
            </summary>
        </member>
        <member name="P:GitCommands.ExternalOperationException.Arguments">
            <summary>
            The command arguments.
            </summary>
        </member>
        <member name="P:GitCommands.ExternalOperationException.WorkingDirectory">
            <summary>
            The working directory.
            </summary>
        </member>
        <member name="M:GitCommands.Gpg.IGitGpgController.GetRevisionCommitSignatureStatusAsync(GitUIPluginInterfaces.GitRevision)">
            <summary>
            Obtain the commit signature status on current revision.
            </summary>
            <returns>Enum value that indicate the gpg status for current git revision.</returns>
        </member>
        <member name="M:GitCommands.Gpg.IGitGpgController.GetCommitVerificationMessage(GitUIPluginInterfaces.GitRevision)">
            <summary>
            Obtain the commit verification message, coming from --pretty="format:%GG"
            </summary>
            <returns>Full string coming from GPG analysis on current revision.</returns>
        </member>
        <member name="M:GitCommands.Gpg.IGitGpgController.GetRevisionTagSignatureStatusAsync(GitUIPluginInterfaces.GitRevision)">
            <summary>
            Obtain the tag status on current revision.
            </summary>
            <returns>Enum value that indicate if current git revision has one tag with good signature, one tag with bad signature or more than one tag.</returns>
        </member>
        <member name="M:GitCommands.Gpg.IGitGpgController.GetTagVerifyMessage(GitUIPluginInterfaces.GitRevision)">
            <summary>
            Obtain the tag verification message for all the tag in current git revision
            </summary>
            <returns>Full concatenated string coming from GPG analysis on all tags on current git revision.</returns>
        </member>
        <member name="M:GitCommands.Gpg.GitGpgController.#ctor(System.Func{GitUIPluginInterfaces.IGitModule})">
            <summary>
            Obtain the tag verification message for all the tag in current git revision
            </summary>
            <returns>Full concatenated string coming from GPG analysis on all tags on current git revision.</returns>
        </member>
        <member name="M:GitCommands.Gpg.GitGpgController.GetRevisionCommitSignatureStatusAsync(GitUIPluginInterfaces.GitRevision)">
            <summary>
            Obtain the commit signature status on current revision.
            </summary>
            <returns>Enum value that indicate the gpg status for current git revision.</returns>
        </member>
        <member name="M:GitCommands.Gpg.GitGpgController.GetRevisionTagSignatureStatusAsync(GitUIPluginInterfaces.GitRevision)">
            <summary>
            Obtain the tag status on current revision.
            </summary>
            <returns>Enum value that indicate if current git revision has one tag with good signature, one tag with bad signature or more than one tag.</returns>
        </member>
        <member name="M:GitCommands.Gpg.GitGpgController.GetCommitVerificationMessage(GitUIPluginInterfaces.GitRevision)">
            <summary>
            Obtain the commit verification message, coming from --pretty="format:%GG"
            </summary>
            <returns>Full string coming from GPG analysis on current revision.</returns>
        </member>
        <member name="M:GitCommands.Gpg.GitGpgController.GetTagVerifyMessage(GitUIPluginInterfaces.GitRevision)">
            <summary>
            Obtain the tag verification message for all the tag on the revision
            </summary>
            <returns>Full string coming from GPG analysis on current revision.</returns>
        </member>
        <member name="T:GitCommands.StagedStatus">
            <summary>
            Status if the file can be staged (worktree->index), unstaged or None (normal commits)
            The status may not be available or unset for some commands
            </summary>
        </member>
        <member name="P:GitCommands.GitItemStatus.IsChanged">
            <summary>
            For files, the file is modified
            For submodules, the commit is changed
            </summary>
        </member>
        <member name="P:GitCommands.GitItemStatus.IsDirty">
            <summary>
            Submodule is dirty
            Info from git-status, may be available before GetSubmoduleStatusAsync is evaluated
            </summary>
        </member>
        <member name="P:GitCommands.GitItemStatus.IsStatusOnly">
            <remarks>
            This item is not a Git item, just status information
            If ErrorMessage is set, this is an error from Git, otherwise just a marker that nothing is changed
            </remarks>
        </member>
        <member name="P:GitCommands.GitItemStatus.IsRangeDiff">
            <remarks>
            This item is not a native git item, but a status information
            calculated with git range-diff command.
            </remarks>
        </member>
        <member name="T:GitCommands.GitModule">
            <summary>Provides manipulation with git module.
            <remarks>Several instances may be created for submodules.</remarks></summary>
        </member>
        <member name="P:GitCommands.GitModule.WorkingDir">
            <summary>
            Gets the directory which contains the git repository.
            </summary>
        </member>
        <member name="P:GitCommands.GitModule.GitExecutable">
            <summary>
            Gets the access to the current git executable associated with this module.
            </summary>
        </member>
        <member name="P:GitCommands.GitModule.GitCommandRunner">
            <summary>
            Gets the access to the current git executable associated with this module.
            </summary>
        </member>
        <member name="P:GitCommands.GitModule.WorkingDirGitDir">
            <summary>
            Gets the location of .git directory for the current working folder.
            </summary>
        </member>
        <member name="P:GitCommands.GitModule.SubmoduleName">
            <summary>
            If this module is a submodule, returns its name, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:GitCommands.GitModule.SubmodulePath">
            <summary>
            If this module is a submodule, returns its path, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:GitCommands.GitModule.SuperprojectModule">
            <summary>
            If this module is a submodule, returns its superproject <see cref="T:GitCommands.GitModule"/>, otherwise <c>null</c>.
            </summary>
            TODO: Add to IGitModule and return IGitModule
        </member>
        <member name="M:GitCommands.GitModule.GetTopModule">
            <summary>
            If this module is a submodule, returns the top-most parent module, otherwise it returns itself.
            </summary>
            TODO: Add to IGitModule and return IGitModule
        </member>
        <member name="P:GitCommands.GitModule.LogOutputEncoding">
            <summary>
            Encoding for commit header (message, notes, author, committer, emails).
            </summary>
        </member>
        <member name="M:GitCommands.GitModule.IsValidGitWorkingDir">
            <summary>Indicates whether the <see cref="P:GitCommands.GitModule.WorkingDir"/> contains a git repository.</summary>
        </member>
        <member name="M:GitCommands.GitModule.IsValidGitWorkingDir(System.String)">
            <summary>Indicates whether the specified directory contains a git repository.</summary>
        </member>
        <member name="M:GitCommands.GitModule.ResolveGitInternalPath(System.String)">
            <summary>
            Asks git to resolve the given relativePath.
            git special folders are located in different directories depending on the kind of repo: submodule, worktree, main.
            See https://git-scm.com/docs/git-rev-parse#Documentation/git-rev-parse.txt---git-pathltpathgt.
            </summary>
            <param name="relativePath">A path relative to the .git directory.</param>
        </member>
        <member name="P:GitCommands.GitModule.GitCommonDirectory">
            <summary>
            Returns git common directory.
            https://git-scm.com/docs/git-rev-parse#Documentation/git-rev-parse.txt---git-common-dir.
            </summary>
        </member>
        <member name="M:GitCommands.GitModule.GetGitDirectory">
            <summary>Gets the ".git" directory path.</summary>
        </member>
        <member name="M:GitCommands.GitModule.GetSubmodulesLocalPaths(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.GitModule.TryFindGitWorkingDir(System.String)">
            <summary>
            Searches from <paramref name="startDir"/> and up through the directory
            hierarchy for a valid git working directory. If found, the path is returned,
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="M:GitCommands.GitModule.GetCurrentCheckout">
            <summary>
            Gets the commit ID of the currently checked out commit.
            If the repo is bare, has no commits or is corrupt, <c>null</c> is returned.
            </summary>
        </member>
        <member name="M:GitCommands.GitModule.UnlockIndex(System.Boolean)">
            <summary>
            Delete index.lock in the current working folder.
            </summary>
            <param name="includeSubmodules">
                If <see langword="true"/> all submodules will be scanned for index.lock files and have them delete, if found.
            </param>
            <exception cref="T:GitCommands.Git.FileDeleteException">Unable to delete specific index.lock.</exception>
        </member>
        <member name="M:GitCommands.GitModule.StartPageantForRemote(System.String)">
            <summary>Tries to start Pageant for the specified remote repo (using the remote's PuTTY key file).</summary>
            <returns>true if the remote has a PuTTY key file; otherwise, false.</returns>
        </member>
        <member name="M:GitCommands.GitModule.PushAllCmd(System.String,GitCommands.Git.ForcePushOptions,System.Boolean,System.Int32)">
            <summary>Creates a 'git push' command using the specified parameters.</summary>
            <param name="remote">Remote repository that is the destination of the push operation.</param>
            <param name="force">If a remote ref is not an ancestor of the local ref, overwrite it.
            <remarks>This can cause the remote repository to lose commits; use it with care.</remarks></param>
            <param name="track">For every branch that is up to date or successfully pushed, add upstream (tracking) reference.</param>
            <param name="recursiveSubmodules">If '1', check whether all submodule commits used by the revisions to be pushed are available on a remote tracking branch; otherwise, the push will be aborted.</param>
            <returns>'git push' command with the specified parameters.</returns>
        </member>
        <member name="M:GitCommands.GitModule.PushCmd(System.String,System.String,System.String,GitCommands.Git.ForcePushOptions,System.Boolean,System.Int32)">
            <summary>Creates a 'git push' command using the specified parameters.</summary>
            <param name="remote">Remote repository that is the destination of the push operation.</param>
            <param name="fromBranch">Name of the branch to push.</param>
            <param name="toBranch">Name of the ref on the remote side to update with the push.</param>
            <param name="force">If a remote ref is not an ancestor of the local ref, overwrite it.
            <remarks>This can cause the remote repository to lose commits; use it with care.</remarks></param>
            <param name="track">For every branch that is up to date or successfully pushed, add upstream (tracking) reference.</param>
            <param name="recursiveSubmodules">If '1', check whether all submodule commits used by the revisions to be pushed are available on a remote tracking branch; otherwise, the push will be aborted.</param>
            <returns>'git push' command with the specified parameters.</returns>
        </member>
        <member name="M:GitCommands.GitModule.BatchUnstageFiles(System.Collections.Generic.IEnumerable{GitCommands.GitItemStatus},System.Action{GitCommands.BatchProgressEventArgs})">
            <summary>
            Batch unstage files using <see cref="M:GitCommands.ExecutableExtensions.RunBatchCommand(GitUIPluginInterfaces.IExecutable,System.Collections.Generic.ICollection{GitCommands.BatchArgumentItem},System.Action{GitCommands.BatchProgressEventArgs},System.Byte[],System.Boolean)"/>.
            </summary>
            <param name="selectedItems">Selected file items.</param>
            <param name="action">Progress update callback.</param>
            <returns><see langword="true" /> if changes should be rescanned; otherwise <see langword="false" />.</returns>.
        </member>
        <member name="M:GitCommands.GitModule.GetStagedStatus(GitUIPluginInterfaces.ObjectId,GitUIPluginInterfaces.ObjectId,GitUIPluginInterfaces.ObjectId)">
            <summary>
            If possible, find if files in a diff are index or worktree.
            </summary>
            <param name="firstId">from revision string.</param>
            <param name="secondId">to revision.</param>
            <param name="parentToSecond">The parent for the second revision.</param>
            <remarks>Git revisions are required to determine if <see cref="T:GitCommands.StagedStatus"/> allows stage/unstage.</remarks>
        </member>
        <member name="M:GitCommands.GitModule.GetDiffChangedFilesFromString(System.String,GitCommands.StagedStatus)">
            <summary>
            Parse the output from git-diff --name-status.
            </summary>
            <param name="statusString">output from the git command.</param>
            <param name="staged">required to determine if <see cref="T:GitCommands.StagedStatus"/> allows stage/unstage.</param>
            <returns>list with the parsed GitItemStatus.</returns>
            <seealso href="https://git-scm.com/docs/git-diff"/>
        </member>
        <member name="M:GitCommands.GitModule.IsDirtyDir">
            <summary>Indicates whether there are any changes to the repository,
             including any untracked files or directories; excluding submodules.</summary>
        </member>
        <member name="M:GitCommands.GitModule.GetFileContentsAsync(GitCommands.GitItemStatus)">
            <summary>
            Get the file contents for the HEAD commit
            </summary>
            <param name="file">The Git status item</param>
            <returns>An awaitable task with the requested file contents.</returns>
        </member>
        <member name="M:GitCommands.GitModule.GetSelectedBranchFast(System.String,System.Boolean)">
            <summary>Dirty but fast. This sometimes fails.</summary>
        </member>
        <member name="M:GitCommands.GitModule.GetSelectedBranch(System.Boolean)">
            <summary>
            Gets the current branch.
            </summary>
            <param name="setDefaultIfEmpty">Return "(no branch)" if detached.</param>
            <returns>Current branchname.</returns>
        </member>
        <member name="M:GitCommands.GitModule.GetRemoteBranch(System.String)">
            <summary>Gets the remote branch of the specified local branch; or "" if none is configured.</summary>
        </member>
        <member name="M:GitCommands.GitModule.GetRefs(System.Boolean,System.Boolean)">
            <summary>
            Get the Git refs.
            </summary>
            <param name="tags">Include tags.</param>
            <param name="branches">Include local branches, also remote branches if <see paramref="tags"/> is set.</param>
            <returns>All Git refs.</returns>
        </member>
        <member name="M:GitCommands.GitModule.GetRefs(GitCommands.Git.Commands.GetRefsEnum)">
            <summary>
            Get the Git refs.
            </summary>
            <param name="getRef">Combined refs to search for.</param>
            <returns>All Git refs.</returns>
        </member>
        <member name="M:GitCommands.GitModule.GetAllBranchesWhichContainGivenCommit(GitUIPluginInterfaces.ObjectId,System.Boolean,System.Boolean)">
            <summary>
            Gets branches which contain the given commit.
            If both local and remote branches are requested, remote branches are prefixed with "remotes/"
            (as returned by git branch -a).
            </summary>
            <param name="objectId">The sha1.</param>
            <param name="getLocal">Pass true to include local branches.</param>
            <param name="getRemote">Pass true to include remote branches.</param>
        </member>
        <member name="M:GitCommands.GitModule.GetAllTagsWhichContainGivenCommit(GitUIPluginInterfaces.ObjectId)">
            <summary>
            Gets all tags which contain the given commit.
            </summary>
            <param name="objectId">The sha1.</param>
        </member>
        <member name="M:GitCommands.GitModule.GetTagMessage(System.String)">
            <summary>
            Returns tag's message. If the lightweight tag is passed, corresponding commit message
            is returned.
            </summary>
        </member>
        <member name="M:GitCommands.GitModule.GetIgnoredFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns list of file names which would be ignored.
            </summary>
            <param name="ignorePatterns">Patterns to ignore (.gitignore syntax).</param>
        </member>
        <member name="M:GitCommands.GitModule.GetCustomDiffMergeTools(System.Boolean)">
            <summary>
            Get a list of diff/merge tools known by Git.
            This normally requires long time (up to tenths of seconds)
            </summary>
            <param name="isDiff">diff or merge.</param>
            <returns>the Git output.</returns>
        </member>
        <member name="M:GitCommands.GitModule.OpenFilesWithDifftool(System.String,System.String,System.String)">
            <summary>
            Compare two Git commitish; blob or rev:path.
            </summary>
            <param name="firstGitCommit">commitish.</param>
            <param name="secondGitCommit">commitish.</param>
            <returns>empty string, or null if either input is null.</returns>
        </member>
        <member name="M:GitCommands.GitModule.CheckBranchFormat(System.String)">
            <summary>
            Uses check-ref-format to ensure that a branch name is well formed.
            </summary>
            <param name="branchName">Branch name to test.</param>
            <returns>true if <paramref name="branchName"/> is valid reference name, otherwise false.</returns>
        </member>
        <member name="M:GitCommands.GitModule.FormatBranchName(System.String)">
            <summary>
            Format branch name, check if name is valid for repository.
            </summary>
            <param name="branchName">Branch name to test.</param>
            <returns>Well formed branch name.</returns>
        </member>
        <member name="M:GitCommands.GitModule.UnescapeOctalCodePoints(System.String)">
            <summary>
            Un-escapes any octal code points embedded within <paramref name="s"/>.
            </summary>
            <remarks>
            If no portions of <paramref name="s"/> contain escaped data, then <paramref name="s"/> is returned.
            <para />
            If <paramref name="s"/> is <c>null</c> then an empty string is returned.
            </remarks>
            <example>
            <code>UnescapeOctalCodePoints(@"\353\221\220\353\213\244") == "두다"</code>
            </example>
            <param name="s">The string to unescape.</param>
            <returns>The unescaped string, or <paramref name="s"/> if no escaped values were present, or <c>""</c> if <paramref name="s"/> is <c>null</c>.</returns>
        </member>
        <member name="M:GitCommands.GitModule.EscapeOctalCodePoints(System.String)">
            <summary>
            Escapes a UTF8 string <paramref name="s"/> into octal code points.
            </summary>
            <remarks>
            If <paramref name="s"/> is <c>null</c> then an empty string is returned.
            </remarks>
            <example>
            <code>EscapeOctalCodePoints("두다") == @"\353\221\220\353\213\244"</code>
            </example>
            <param name="s">The string to escape.</param>
            <returns>The escaped string, or <c>""</c> if <paramref name="s"/> is <c>null</c>.</returns>
        </member>
        <member name="M:GitCommands.GitModule.ReEncodeStringFromLossless(System.String,System.Text.Encoding)">
            <summary>
            Re-encodes string from GitCommandHelpers.LosslessEncoding to toEncoding.
            </summary>
        </member>
        <member name="M:GitCommands.GitModule.ReEncodeShowString(System.String)">
            <summary>
            header part of show result is encoded in logoutputencoding (including re-encoded commit message).
            diff part is raw data in file's original encoding.
            s should be encoded in LosslessEncoding.
            </summary>
        </member>
        <member name="M:GitCommands.GitModule.IsGitErrorMessage(System.String)">
            <summary>
            Determines whether a git command's output indicates an error occurred.
            </summary>
            <param name="gitOutput">The output from the git command, to inspect.</param>
            <returns><c>true</c> if the command detailed an error, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:GitCommands.GitPush">
            <summary>Creates a 'git push' command.
            Push a local branch to a remote branch.
            Update remote refs along with associated objects.</summary>
        </member>
        <member name="P:GitCommands.GitPush.Remote">
            <summary>Gets the name or URL of the remote repo to push to.</summary>
        </member>
        <member name="P:GitCommands.GitPush.PushActions">
            <summary>Gets the set of LocalBranch:RemoteBranch actions.</summary>
        </member>
        <member name="P:GitCommands.GitPush.ReportProgress">
            <summary>Indicates whether to report progress during the push operation.</summary>
        </member>
        <member name="M:GitCommands.GitPush.#ctor">
            <summary>Works like 'git push {remote}', where {remote} is the current branch’s remote.
             (or 'origin', if no remote is configured for the current branch).</summary>
        </member>
        <member name="M:GitCommands.GitPush.#ctor(System.String)">
            <summary>Works like 'git push {remote} :', where branches matching the refspec are pushed.</summary>
        </member>
        <member name="M:GitCommands.GitPush.#ctor(System.String,System.String)">
            <summary>'git push {remote} {source}' : Push to a matching ref in the remote,
             or if non-existing, create one with the same name.</summary>
        </member>
        <member name="M:GitCommands.GitPush.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>Push a local branch to a remote branch.</summary>
            <param name="remote">Name or URL of the remote repository.</param>
            <param name="source">Name of the branch to push.</param>
            <param name="destination">Ref on the remote side to be updated.</param>
            <param name="force">Indicates whether to update the <paramref name="destination"/>
            ref even when the update is not a fast-forward.</param>
        </member>
        <member name="M:GitCommands.GitPush.#ctor(System.String,GitCommands.GitPushAction[])">
            <summary>Push sets of local branches to a remote branches.</summary>
            <param name="remote">Name or URL of the remote repository.</param>
            <param name="pushActions">Sets of LocalBranch:RemoteBranch.</param>
        </member>
        <member name="M:GitCommands.GitPush.#ctor(System.String,System.Collections.Generic.IEnumerable{GitCommands.GitPushAction})">
            <summary>Push sets of local branches to remote branches.</summary>
            <param name="remote">Name or URL of the remote repository.</param>
            <param name="pushActions">Sets of LocalBranch:RemoteBranch.</param>
        </member>
        <member name="M:GitCommands.GitPush.ToString">
            <summary>Creates the 'push' command string. <example>"push --progress origin master:master"</example></summary>
        </member>
        <member name="T:GitCommands.GitPushAction">
            <summary>Part of a 'git push', which specifies the local and/or remote branch.</summary>
        </member>
        <member name="M:GitCommands.GitPushAction.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Push a local branch to a remote one, optionally forcing a non-fast-forward commit.
            </summary>
            <param name="source">Name of the branch to push.</param>
            <param name="destination">Ref on the remote side to be updated.</param>
            <param name="force">Indicates whether to update the <paramref name="destination"/>
            ref even when the update is not a fast-forward.</param>
        </member>
        <member name="M:GitCommands.GitPushAction.DeleteRemoteBranch(System.String)">
            <summary>Delete a remote branch.</summary>
            <param name="branch">Remote branch to delete.</param>
        </member>
        <member name="M:GitCommands.GitPushAction.ToString">
            <summary>Creates the push action command part.</summary>
        </member>
        <member name="M:GitCommands.GitRef.GetTrackingRemote(GitUIPluginInterfaces.ISettingsValueGetter)">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.GitRef.MergeWith">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.GitRef.GetMergeWith(GitUIPluginInterfaces.ISettingsValueGetter)">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.GitRefName.RefsTagsPrefix">
            <summary>"refs/tags/".</summary>
        </member>
        <member name="P:GitCommands.GitRefName.RefsHeadsPrefix">
            <summary>"refs/heads/".</summary>
        </member>
        <member name="P:GitCommands.GitRefName.RefsRemotesPrefix">
            <summary>"refs/remotes/".</summary>
        </member>
        <member name="P:GitCommands.GitRefName.RefsBisectPrefix">
            <summary>"refs/bisect/".</summary>
        </member>
        <member name="P:GitCommands.GitRefName.RefsBisectGoodPrefix">
            <summary>"refs/bisect/good".</summary>
        </member>
        <member name="P:GitCommands.GitRefName.RefsBisectBadPrefix">
            <summary>"refs/bisect/bad".</summary>
        </member>
        <member name="P:GitCommands.GitRefName.RefsStashPrefix">
            <summary>"refs/stash".</summary>
        </member>
        <member name="P:GitCommands.GitRefName.TagDereferenceSuffix">
            <summary>"^{}".</summary>
        </member>
        <member name="M:GitCommands.GitSshHelpers.SetSsh(System.String)">
            <summary>Sets the git SSH command path.</summary>
        </member>
        <member name="T:GitCommands.IgnoreSubmodulesMode">
            <summary>Specifies whether to ignore changes to submodules when looking for changes (e.g. via 'git status').</summary>
        </member>
        <member name="F:GitCommands.IgnoreSubmodulesMode.Default">
            <summary>Default is <see cref="F:GitCommands.IgnoreSubmodulesMode.All"/> (hides all changes to submodules).</summary>
        </member>
        <member name="F:GitCommands.IgnoreSubmodulesMode.None">
            <summary>Consider a submodule modified when it either:
             contains untracked or modified files,
             or its HEAD differs from the commit recorded in the superproject.</summary>
        </member>
        <member name="F:GitCommands.IgnoreSubmodulesMode.Untracked">
            <summary>Submodules NOT considered dirty when they only contain <i>untracked</i> content
             (but they are still scanned for modified content).</summary>
        </member>
        <member name="F:GitCommands.IgnoreSubmodulesMode.Dirty">
            <summary>Ignores all changes to the work tree of submodules,
             only changes to the <i>commits</i> stored in the superproject are shown.</summary>
        </member>
        <member name="F:GitCommands.IgnoreSubmodulesMode.All">
            <summary>Hides all changes to submodules
             (and suppresses the output of submodule summaries when the config option status.submodulesummary is set).</summary>
        </member>
        <member name="T:GitCommands.ResetMode">
            <summary>Arguments to 'git reset'.</summary>
        </member>
        <member name="F:GitCommands.ResetMode.ResetIndex">
            <summary>(no option)</summary>
        </member>
        <member name="F:GitCommands.ResetMode.Soft">
            <summary>--soft</summary>
        </member>
        <member name="F:GitCommands.ResetMode.Mixed">
            <summary>--mixed</summary>
        </member>
        <member name="F:GitCommands.ResetMode.Hard">
            <summary>--hard</summary>
        </member>
        <member name="F:GitCommands.ResetMode.Merge">
            <summary>--merge</summary>
        </member>
        <member name="F:GitCommands.ResetMode.Keep">
            <summary>--keep</summary>
        </member>
        <member name="T:GitCommands.UntrackedFilesMode">
            <summary>Specifies whether to check untracked files/directories (e.g. via 'git status')</summary>
        </member>
        <member name="F:GitCommands.UntrackedFilesMode.Default">
            <summary>Default is <see cref="F:GitCommands.UntrackedFilesMode.All"/>; when <see cref="T:GitCommands.UntrackedFilesMode"/> is NOT used, 'git status' uses <see cref="F:GitCommands.UntrackedFilesMode.Normal"/>.</summary>
        </member>
        <member name="F:GitCommands.UntrackedFilesMode.No">
            <summary>Show no untracked files.</summary>
        </member>
        <member name="F:GitCommands.UntrackedFilesMode.Normal">
            <summary>Shows untracked files and directories.</summary>
        </member>
        <member name="F:GitCommands.UntrackedFilesMode.All">
            <summary>Shows untracked files and directories, and individual files in untracked directories.</summary>
        </member>
        <member name="F:GitCommands.DiffListSortType.FilePath">
            <summary>
            Sorts by file path alphanumerically
            </summary>
        </member>
        <member name="F:GitCommands.DiffListSortType.FileExtension">
            <summary>
            Sorts by file extension then by path
            </summary>
        </member>
        <member name="F:GitCommands.DiffListSortType.FileStatus">
            <summary>
            Sorts by git change type. Addition, Deletions, edits, etc. then by path
            </summary>
        </member>
        <member name="M:GitCommands.DiffListSortServiceExtensions.CurrentAndFutureSorting(GitCommands.IDiffListSortService)">
            <summary>
            Provides the <see cref="P:GitCommands.IDiffListSortService.DiffListSorting"/> immediately and then an element for each <see cref="E:GitCommands.IDiffListSortService.DiffListSortingChanged"/>.
            </summary>
            <param name="diffListSortService">The diff list service</param>
            <returns>A hot stream with one immediate cold element.</returns>
        </member>
        <member name="M:GitCommands.LockableNotifier.Notify">
            <summary>
            notifies if is unlocked
            </summary>
        </member>
        <member name="M:GitCommands.LockableNotifier.Lock">
            <summary>
            locks raising notification
            </summary>
        </member>
        <member name="M:GitCommands.LockableNotifier.UnLock(System.Boolean)">
            <summary>
            unlocks raising notification
            to unlock raising notification, UnLock has to be called as many times as Lock was called
            </summary>
            <param name="requestNotify">true if Notify has to be called</param>
        </member>
        <member name="P:GitCommands.LockableNotifier.IsLocked">
            <summary>
            true if raising notification is locked
            </summary>
        </member>
        <member name="M:GitCommands.Patches.Chunk.ParseHeader(System.String)">
            <summary>
            Parses a header line, setting the start index.
            </summary>
            <remarks>
            An example header line is:
            <code>
             -116,12 +117,15 @@ private string LoadFile(string fileName, Encoding filesContentEncoding)
            </code>
            In which case the start line is <c>116</c>.
            </remarks>
        </member>
        <member name="M:GitCommands.Patches.PatchProcessor.CreatePatchesFromString(System.String,System.Lazy{System.Text.Encoding})">
            <summary>
            Parses a patch file into individual <see cref="T:GitCommands.Patches.Patch"/> objects.
            </summary>
            <remarks>
            The diff part of a patch is printed verbatim.
            <para />
            Everything else (header, warnings, ...) is printed in git encoding (<see cref="P:GitCommands.GitModule.SystemEncoding"/>).
            <para />
            Since a patch may contain the diff of more than one file, it would be nice to obtain the encoding for each file
            from <c>.gitattributes</c>. For now, one encoding is used for every file in the repo (<see cref="P:GitCommands.Settings.ConfigFileSettings.FilesEncoding"/>).
            <para />
            File paths can be quoted (see <c>core.quotepath</c>). They are unquoted by <see cref="M:GitCommands.GitModule.ReEncodeFileNameFromLossless(System.String)"/>.
            </remarks>
        </member>
        <member name="M:GitCommands.PathUtil.ToPosixPath(System.String)">
            <summary>Replaces native path separator with posix path separator.</summary>
        </member>
        <member name="M:GitCommands.PathUtil.ToNativePath(System.String)">
            <summary>Replaces '\' with '/'.</summary>
        </member>
        <member name="M:GitCommands.PathUtil.RemoveTrailingPathSeparator(System.String)">
            <summary>
            Removes any trailing path separator character from the end of <paramref name="dirPath"/>.
            </summary>
        </member>
        <member name="M:GitCommands.PathUtil.EnsureTrailingPathSeparator(System.String)">
             <summary>
             Code guideline: "A directory path should always end with / or \.
             Better use Path.Combine instead of Setting.PathSeparator"
            
             This method can be used to add (or keep) a trailing path separator character to a directory path.
             </summary>
        </member>
        <member name="M:GitCommands.PathUtil.Combine(System.String,System.String)">
            <summary>
            Wrapper for Path.Combine.
            </summary>
            <remark>
            Similar to the .NET Core 2.1 variant, except that null is returned if Windows
            invalid characters (that may be accepted in Git or other filesystems)
            are in the paths instead of a possible path (the OS or file system will throw
            if the paths are invalid).
            </remark>
            <param name="path1">initial part.</param>
            <param name="path2">second part.</param>
            <returns>path if it can be combined, null otherwise.</returns>
        </member>
        <member name="M:GitCommands.PathUtil.GetExtension(System.String)">
            <summary>
            Wrapper for Path.GetExtension.
            </summary>
            <remark>
            <see cref="M:GitCommands.PathUtil.Combine(System.String,System.String)"/> for motivation.
            </remark>
            <param name="path">path to check.</param>
            <returns>path if it can be combined, empty otherwise.</returns>
        </member>
        <member name="M:GitCommands.PathUtil.ResolveWsl(System.String,System.String)">
            <summary>
            Special handling of on purpose invalid WSL machine name in Windows 10.
            </summary>
        </member>
        <member name="M:GitCommands.PathUtil.TryDeleteDirectory(System.String,System.String@)">
            <summary>
             Deletes the requested folder recursively.
            </summary>
            <returns>
             <see langword="true" /> if the folder is absent or successfully removed; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:GitCommands.Plink.GetPlinkCompatibleUrl(System.String)">
            <summary>
            Transforms the given input Url to make it compatible with Plink, if necessary
            </summary>
        </member>
        <member name="P:GitCommands.Remotes.ConfigFileRemote.Disabled">
            <summary>
            Gets or sets value indicating whether the remote is enabled or not.
            If remote section is [remote branch] then it is considered enabled, if it is [-remote branch] then it is disabled.
            </summary>
        </member>
        <member name="P:GitCommands.Remotes.ConfigFileRemote.Name">
            <summary>
            Gets or sets the name of the remote branch.
            </summary>
        </member>
        <member name="P:GitCommands.Remotes.ConfigFileRemote.Push">
            <summary>
            Gets or sets value stored in .git/config via <see cref="F:GitCommands.Config.SettingKeyString.RemotePush"/> key.
            </summary>
        </member>
        <member name="P:GitCommands.Remotes.ConfigFileRemote.PushUrl">
            <summary>
            Gets or sets the last pushurl stored in .git/config via <see cref="F:GitCommands.Config.SettingKeyString.RemotePushUrl"/> key.
            </summary>
        </member>
        <member name="P:GitCommands.Remotes.ConfigFileRemote.PuttySshKey">
            <summary>
            Gets or sets value stored in .git/config via <see cref="F:GitCommands.Config.SettingKeyString.RemotePuttySshKey"/> key.
            </summary>
        </member>
        <member name="P:GitCommands.Remotes.ConfigFileRemote.Url">
            <summary>
            Gets or sets value stored in .git/config via <see cref="F:GitCommands.Config.SettingKeyString.RemoteUrl"/> key.
            </summary>
        </member>
        <member name="T:GitCommands.Remotes.ConfigFileRemoteSaveResult">
            <summary>
            Represents a result of <see cref="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.SaveRemote(GitCommands.Remotes.ConfigFileRemote,System.String,System.String,System.String,System.String)"/> operation.
            </summary>
        </member>
        <member name="P:GitCommands.Remotes.ConfigFileRemoteSaveResult.ShouldUpdateRemote">
            <summary>
            Indicates whether the "remote update" is desirable after the save operation.
            </summary>
        </member>
        <member name="P:GitCommands.Remotes.ConfigFileRemoteSaveResult.UserMessage">
            <summary>
            Gets the output of the save operation (if any).
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.GetDefaultPushRemote(GitCommands.Remotes.ConfigFileRemote,System.String)">
            <summary>
            Returns the default remote for push operation.
            </summary>
            <returns>The <see cref="P:GitCommands.GitRef.Name"/> if found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.LoadRemotes(System.Boolean)">
            <summary>
            Loads the list of remotes configured in .git/config file.
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.RemoveRemote(GitCommands.Remotes.ConfigFileRemote)">
            <summary>
            Removes the specified remote from .git/config file.
            </summary>
            <param name="remote">Remote to remove.</param>
            <returns>Output of the operation.</returns>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.EnabledRemoteExists(System.String)">
            <summary>
            Returns true if input remote exists and is enabled.
            </summary>
            <param name="remoteName">Name of remote to check.</param>
            <returns>True if input remote exists and is enabled.</returns>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.DisabledRemoteExists(System.String)">
            <summary>
            Returns true if input remote exists and is disabled.
            </summary>
            <param name="remoteName">Name of remote to check.</param>
            <returns>True if input remote exists and is disabled.</returns>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.SaveRemote(GitCommands.Remotes.ConfigFileRemote,System.String,System.String,System.String,System.String)">
            <summary>
              Saves the remote details by creating a new or updating an existing remote entry in .git/config file.
            </summary>
            <param name="remote">An existing remote instance or <see langword="null"/> if creating a new entry.</param>
            <param name="remoteName">
              <para>The remote name.</para>
              <para>If updating an existing remote and the name changed, it will result in remote name change and prompt for "remote update".</para>
            </param>
            <param name="remoteUrl">
              <para>The remote URL.</para>
              <para>If updating an existing remote and the URL changed, it will result in remote URL change and prompt for "remote update".</para>
            </param>
            <param name="remotePushUrl">An optional alternative remote push URL.</param>
            <param name="remotePuttySshKey">An optional Putty SSH key.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.ToggleRemoteState(System.String,System.Boolean)">
            <summary>
             Marks the remote as enabled or disabled in .git/config file.
            </summary>
            <param name="remoteName">The name of the remote.</param>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.GetDisabledRemotes">
            <summary>
            Retrieves disabled remotes from .git/config file.
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.GetDisabledRemoteNames">
            <summary>
            Retrieves disabled remote names from the .git/config file.
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.GetEnabledRemoteNames">
            <summary>
            Retrieves enabled remote names.
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.IConfigFileRemoteSettingsManager.GetEnabledRemoteNamesWithoutBranches">
            <summary>
            Retrieves enabled remote names of remotes without branches (i.e. that require a fetch).
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.GetDefaultPushRemote(GitCommands.Remotes.ConfigFileRemote,System.String)">
            <summary>
            Returns the default remote for push operation.
            </summary>
            <returns>The <see cref="P:GitCommands.GitRef.Name"/> if found, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.GetDisabledRemotes">
            <summary>
            Retrieves disabled remotes from .git/config file.
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.GetDisabledRemoteNames">
            <summary>
            Retrieves disabled remote names from the .git/config file.
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.GetEnabledRemoteNames">
            <summary>
            Retrieves enabled remote names.
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.GetEnabledRemoteNamesWithoutBranches">
            <summary>
            Retrieves enabled remote names of remotes without branches (i.e. that require a fetch).
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.LoadRemotes(System.Boolean)">
            <summary>
            Loads the list of remotes configured in .git/config file.
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.RemoveRemote(GitCommands.Remotes.ConfigFileRemote)">
            <summary>
            Removes the specified remote from .git/config file.
            </summary>
            <param name="remote">Remote to remove.</param>
            <returns>Output of <see cref="M:GitUIPluginInterfaces.IGitModule.RemoveRemote(System.String)"/> operation, if the remote is active; otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.EnabledRemoteExists(System.String)">
            <summary>
            Returns true if input remote exists and is enabled.
            </summary>
            <param name="remoteName">Name of remote to check.</param>
            <returns>True if input remote exists and is enabled.</returns>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.DisabledRemoteExists(System.String)">
            <summary>
            Returns true if input remote exists and is disabled.
            </summary>
            <param name="remoteName">Name of remote to check.</param>
            <returns>True if input remote exists and is disabled.</returns>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.SaveRemote(GitCommands.Remotes.ConfigFileRemote,System.String,System.String,System.String,System.String)">
            <summary>
              Saves the remote details by creating a new or updating an existing remote entry in .git/config file.
            </summary>
            <param name="remote">An existing remote instance or <see langword="null"/> if creating a new entry.</param>
            <param name="remoteName">
              <para>The remote name.</para>
              <para>If updating an existing remote and the name changed, it will result in remote name change and prompt for "remote update".</para>
            </param>
            <param name="remoteUrl">
              <para>The remote URL.</para>
              <para>If updating an existing remote and the URL changed, it will result in remote URL change and prompt for "remote update".</para>
            </param>
            <param name="remotePushUrl">An optional alternative remote push URL.</param>
            <param name="remotePuttySshKey">An optional Putty SSH key.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:GitCommands.Remotes.ConfigFileRemoteSettingsManager.ToggleRemoteState(System.String,System.Boolean)">
            <summary>
             Marks the remote as enabled or disabled in .git/config file.
            </summary>
            <param name="remoteName">An existing remote instance.</param>
            <param name="disabled">The new state of the remote. <see langword="true"/> to disable the remote; otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:GitCommands.Remotes.IRepoNameExtractor.Get">
            <summary>
            Get a "repo shortname" from the current repo URL
            There is no official Git repo shortname, this is one possible definition:
             The filename without extension for the remote URL
            This function could have been included in GitModule
            </summary>
        </member>
        <member name="M:GitCommands.Remotes.RepoNameExtractor.Get">
            <summary>
            Get a "repo shortname" from the current repo URL
            There is no official Git repo shortname, this is one possible definition:
             The filename without extension for the remote URL
            This function could have been included in GitModule
            </summary>
        </member>
        <member name="T:GitCommands.RevisionReader.StringLineReader">
            <summary>
            Simple type to walk along a string, line by line, without redundant allocations.
            </summary>
        </member>
        <member name="P:GitCommands.AppSettings.DocumentationBaseUrl">
             <summary>
             Gets the base part of the documentation link for the current application version,
             which looks something like "https://git-extensions-documentation.readthedocs.org/en/main/"
             for the master branch, and "https://git-extensions-documentation.readthedocs.org/en/release-X.Y/"
             for a release/X.Y branch.
            
             TODO: We currently use only EN language, but should maybe consider using the user's preferred language.
             </summary>
        </member>
        <member name="P:GitCommands.AppSettings.AuthorImageSizeInCommitInfo">
            <summary>
            Gets the size of the commit author avatar. Set to 80px.
            </summary>
            <remarks>The value should be scaled with DPI.</remarks>
        </member>
        <member name="M:GitCommands.AppSettings.GetEnumViaString``1(System.String,``0)">
            <summary>
            Loads a setting with GetString and parses it to an enum
            </summary>
            <remarks>
            It's currently a limitation by <see cref="T:GitCommands.SettingsCache"/> that a given setting can
            only ever use GetString/SetString or GetEnum/SetEnum but not both. This is the case
            because <see cref="T:GitCommands.SettingsCache"/> caches a typed/parsed value of the setting and
            crashes at <see cref="M:GitCommands.SettingsCache.TryGetValue``1(System.String,``0,System.Func{System.String,``0},``0@)"/>
            if the type that is requested doesn't match the cached type.
            </remarks>
        </member>
        <member name="P:GitCommands.AppSettings.DefaultPullAction">
            <summary>
            Gets or sets the default pull action that is performed by the toolbar icon when it is clicked on.
            </summary>
        </member>
        <member name="P:GitCommands.AppSettings.FormPullAction">
            <summary>
            Gets or sets the default pull action as configured in the FormPull dialog.
            </summary>
        </member>
        <member name="P:GitCommands.AppSettings.GitBinDir">
            <summary>Gets or sets the path to the git application executable.</summary>
        </member>
        <member name="P:GitCommands.AppSettings.Pageant">
            <summary>Gets the path to Pageant (SSH auth agent).</summary>
        </member>
        <member name="M:GitCommands.Settings.ConfigFileSettings.AddConfigSection(GitUIPluginInterfaces.IConfigSection)">
            <summary>
            Adds the specific configuration section to the .git/config file.
            </summary>
            <param name="configSection">The configuration section.</param>
        </member>
        <member name="M:GitCommands.Settings.ConfigFileSettings.RemoveConfigSection(System.String,System.Boolean)">
            <summary>
            Removes the specific configuration section from the .git/config file.
            </summary>
            <param name="configSectionName">The name of the configuration section.</param>
            <param name="performSave">If <see langword="true"/> the configuration changes will be saved immediately.</param>
        </member>
        <member name="M:GitCommands.Settings.ConfigFileSettingsCache.AddConfigSection(GitUIPluginInterfaces.IConfigSection)">
            <summary>
            Adds the specific configuration section to the .git/config file.
            </summary>
            <param name="configSection">The configuration section.</param>
        </member>
        <member name="M:GitCommands.Settings.ConfigFileSettingsCache.RemoveConfigSection(System.String,System.Boolean)">
            <summary>
            Removes the specific configuration section from the .git/config file.
            </summary>
            <param name="configSectionName">The name of the configuration section.</param>
            <param name="performSave">If <see langword="true"/> the configuration changes will be saved immediately.</param>
        </member>
        <member name="F:GitCommands.Settings.IgnoreWhitespaceKind.None">
            <summary>
            Do not ignore whitespace.
            </summary>
        </member>
        <member name="F:GitCommands.Settings.IgnoreWhitespaceKind.Eol">
            <summary>
            Ignore changes in whitespace at EOL.
            </summary>
            <see href="https://git-scm.com/docs/git-diff#Documentation/git-diff.txt---ignore-space-at-eol" />
        </member>
        <member name="F:GitCommands.Settings.IgnoreWhitespaceKind.Change">
            <summary>
            Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.
            </summary>
            <see href="https://git-scm.com/docs/git-diff#Documentation/git-diff.txt---ignore-space-change" />
        </member>
        <member name="F:GitCommands.Settings.IgnoreWhitespaceKind.AllSpace">
            <summary>
            Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.
            </summary>
            <see href="https://git-scm.com/docs/git-diff#Documentation/git-diff.txt---ignore-all-space" />
        </member>
        <member name="T:GitCommands.Settings.RepoDistSettings">
            <summary>
            Settings that can be distributed with repository.
            They can be overridden for a particular repository.
            </summary>
        </member>
        <member name="E:GitCommands.Settings.ISetting`1.Updated">
            <summary>
            Event triggered after settings update.
            </summary>
        </member>
        <member name="P:GitCommands.Settings.ISetting`1.SettingsSource">
            <summary>
            Settings provider.
            </summary>
        </member>
        <member name="P:GitCommands.Settings.ISetting`1.Name">
            <summary>
            Name of the setting.
            </summary>
        </member>
        <member name="P:GitCommands.Settings.ISetting`1.Default">
            <summary>
            Default value for setting type.
            For nullable except "string" is default(T).
            For "string" is the defaultValue ?? string.Empty from constructor.
            For non nullable is the defaultValue from constructor.
            </summary>
        </member>
        <member name="P:GitCommands.Settings.ISetting`1.Value">
            <summary>
            Value of the setting.
            For nullable except "string" is the value from storage.
            For "string" is the value from storage or <see cref="P:GitCommands.Settings.ISetting`1.Default"/>.
            For non nullable is the value from storage or <see cref="P:GitCommands.Settings.ISetting`1.Default"/>.
            </summary>
        </member>
        <member name="P:GitCommands.Settings.ISetting`1.IsUnset">
            <summary>
            Value of the setting.
            For nullable except "string" always false (null is value too).
            For "string" is true when the stored value is null or is false when the stored value not null.
            For non nullable is true when the stored value is null or is false when the stored value not null.
            </summary>
        </member>
        <member name="P:GitCommands.Settings.ISetting`1.FullPath">
            <summary>
            Full name of the setting.
            Includes section name and setting name.
            </summary>
        </member>
        <member name="E:GitCommands.Settings.Setting.SettingOf`1.Updated">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.Settings.Setting.SettingOf`1.SettingsSource">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.Settings.Setting.SettingOf`1.Name">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.Settings.Setting.SettingOf`1.Default">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.Settings.Setting.SettingOf`1.Value">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.Settings.Setting.SettingOf`1.IsUnset">
            <inheritdoc />
        </member>
        <member name="P:GitCommands.Settings.Setting.SettingOf`1.FullPath">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Settings.SettingsContainer`2.SetValue``1(System.String,``0,System.Func{``0,System.String})">
            <summary>
            sets given value at the possible lowest priority level
            </summary>
        </member>
        <member name="F:GitCommands.Settings.SettingsKind.Global">
            <summary>
            Global for all repositories
            </summary>
        </member>
        <member name="F:GitCommands.Settings.SettingsKind.Distributed">
            <summary>
            Version-controlled, distributed with current repository
            </summary>
        </member>
        <member name="F:GitCommands.Settings.SettingsKind.Local">
            <summary>
            Local for current repository
            </summary>
        </member>
        <member name="F:GitCommands.Settings.SettingsKind.Effective">
            <summary>
            Effective - first assigned value in the following order: Local, Distributable, Global
            </summary>
        </member>
        <member name="T:GitCommands.AvatarFallbackType">
            <summary>
            Types of generated Avatars images that are used as fallback in the absence of a user-uploaded image.
            <see cref="F:GitCommands.AvatarFallbackType.AuthorInitials"/> is provided locally, the rest is served by Gravatar.
            See http://en.gravatar.com/site/implement/images#default-image for the ones provided by the Gravatar service
            </summary>
        </member>
        <member name="F:GitCommands.AvatarFallbackType.AuthorInitials">
            <summary>
            Git Extensions will generate an avatar with the author initials avatar (color based on the email hash).
            </summary>
        </member>
        <member name="F:GitCommands.AvatarFallbackType.MonsterId">
            <summary>
            Return a generated monster based on the email hash (provided by Gravatar service).
            </summary>
        </member>
        <member name="F:GitCommands.AvatarFallbackType.Wavatar">
            <summary>
            Return a generated face based on the email hash (provided by Gravatar service).
            </summary>
        </member>
        <member name="F:GitCommands.AvatarFallbackType.Identicon">
            <summary>
            Return a geometric pattern based on the email hash (provided by Gravatar service).
            </summary>
        </member>
        <member name="F:GitCommands.AvatarFallbackType.Retro">
            <summary>
            Return an 8-bit-style face based on the email hash (provided by Gravatar service).
            </summary>
        </member>
        <member name="F:GitCommands.AvatarFallbackType.Robohash">
            <summary>
            Return a generated robot based on the email hash (provided by Gravatar service).
            </summary>
        </member>
        <member name="M:GitCommands.SshPathLocator.Find(System.String)">
            <summary>
            Gets the git SSH command.
            If the environment variable is not set, will try to find ssh.exe in git installation directory.
            If not found, will return "".
            Note: This method is unused in GE and removed in master, kept for plugins.
            </summary>
        </member>
        <member name="M:GitCommands.SshPathLocator.GetSshFromGitDir(System.String)">
            <summary>
            Get ssh path from Git installation.
            (Also used by plugins to get the OpenSSH path).
            </summary>
            <param name="gitBinDirectory">Git installation directory.</param>
            <returns>Path to ssh.exe or null.</returns>
        </member>
        <member name="P:GitCommands.Statistics.ImpactLoader.RespectMailmap">
            <summary>
            property to enable mailmap respectfulness
            </summary>
        </member>
        <member name="T:GitCommands.StringPool">
            <summary>
            Pool for string instances, with the goal of drawing from the pool without requiring
            a precisely trimmed string for the query.
            </summary>
        </member>
        <member name="P:GitCommands.StringPool.Count">
            <summary>
            Gets the number of items unique strings in the pool.
            </summary>
        </member>
        <member name="M:GitCommands.StringPool.EqualsAtIndex(System.String,System.Int32,System.String)">
            <summary>
            Determines whether <paramref name="comparand"/> exists at <paramref name="index"/> in <paramref name="source"/>.
            </summary>
            <remarks>
            <para>Any content within <paramref name="source"/> outside of the range denoted by <paramref name="index"/>
            and length of <paramref name="comparand"/> is ignored.</para>
            <para>This method performs no allocation.</para>
            </remarks>
            <param name="source">The string to search in for <paramref name="comparand"/>.</param>
            <param name="index">The offset within <paramref name="source"/> at which to start looking for <paramref name="comparand"/>.</param>
            <param name="comparand">The string to search for in <paramref name="source"/>.</param>
            <returns><c>true</c> if the string is found at the required position, otherwise <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="comparand"/> at <paramref name="index"/> would extend beyond the
            range of <paramref name="source"/>.</exception>
        </member>
        <member name="T:GitCommands.Submodules.SubmoduleInfo">
            <summary>
            Contains submodule information that is loaded asynchronously.
            </summary>
        </member>
        <member name="P:GitCommands.Submodules.SubmoduleInfo.Text">
            <summary>
            User-friendly display text.
            </summary>
        </member>
        <member name="P:GitCommands.Submodules.SubmoduleInfo.Path">
            <summary>
            Full path to submodule
            </summary>
        </member>
        <member name="T:GitCommands.Submodules.SubmoduleInfoResult">
            <summary>
            Complete set of gathered submodule information.
            </summary>
        </member>
        <member name="P:GitCommands.Submodules.SubmoduleInfoResult.CurrentSubmoduleStatus">
            <summary>
            GitItemStatus for the current submodule
            </summary>
        </member>
        <member name="P:GitCommands.Submodules.SubmoduleStatusEventArgs.StructureUpdated">
            <summary>
            First update of the submodule structure. Status of the submodule will be updated asynchronously.
            </summary>
        </member>
        <member name="M:GitCommands.Submodules.ISubmoduleStatusProvider.UpdateSubmodulesStructureAsync(System.String,System.String,System.Boolean)">
            <summary>
            Update the submodule structure; find superprojects and submodules.
            </summary>
            <param name="workingDirectory">Current module working directory.</param>
            <param name="noBranchText">The text where no branch is checked out for the submodule.</param>
            <param name="updateStatus">Update the detailed submodule status (set when current module is not top project).</param>
        </member>
        <member name="M:GitCommands.Submodules.ISubmoduleStatusProvider.UpdateSubmodulesStatusAsync(System.String,System.Collections.Generic.IReadOnlyList{GitCommands.GitItemStatus},System.Boolean)">
            <summary>
            Update the submodule status.
            </summary>
            <param name="workingDirectory">Current module working directory.</param>
            <param name="gitStatus">The Git status for the changes (also other than submodules).</param>
            <param name="forceUpdate">Suppress the usual delay of 15 seconds between consecutive updates.</param>
        </member>
        <member name="M:GitCommands.Submodules.SubmoduleStatusProvider.UpdateSubmodulesStructureAsync(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Submodules.SubmoduleStatusProvider.UpdateSubmodulesStatusAsync(System.String,System.Collections.Generic.IReadOnlyList{GitCommands.GitItemStatus},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GitCommands.Submodules.SubmoduleStatusProvider.GetSuperProjectRepositorySubmodulesStructure(GitCommands.GitModule,System.String)">
            <summary>
            Get the result submodule structure.
            </summary>
            <param name="currentModule">The current module.</param>
            <param name="noBranchText">text with no branches.</param>
        </member>
        <member name="M:GitCommands.Submodules.SubmoduleStatusProvider.UpdateSubmodulesStatusAsync(GitCommands.GitModule,System.Collections.Generic.IReadOnlyList{GitCommands.GitItemStatus},System.Threading.CancellationToken)">
            <summary>
            Update the detailed status from the git status.
            </summary>
            <param name="module">Current module.</param>
            <param name="gitStatus">git status.</param>
            <param name="cancelToken">Cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:GitCommands.Submodules.SubmoduleStatusProvider.SetModuleAsDirty(GitCommands.GitModule)">
            <summary>
            Set the module (normally top module) as dirty (if changes in module or any submodule)
            If status is already set, use that (so no change from changed commits to dirty).
            </summary>
            <param name="module">the submodule</param>
        </member>
        <member name="M:GitCommands.Submodules.SubmoduleStatusProvider.SetModuleAsDirtyUpwards(GitCommands.GitModule)">
            <summary>
            Set the status to 'dirty' recursively to super projects.
            </summary>
            <param name="module">module.</param>
        </member>
        <member name="M:GitCommands.Submodules.SubmoduleStatusProvider.GetSubmoduleDetailedStatusAsync(GitCommands.GitModule,System.Threading.CancellationToken)">
            <summary>
            Get the detailed submodule status submodules below 'module' (but not this module).
            </summary>
            <param name="module">Module to compare to.</param>
            <param name="cancelToken">Cancellation token.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:GitCommands.Submodules.SubmoduleStatusProvider.GetSubmoduleDetailedStatusAsync(GitCommands.GitModule,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the detailed submodule status for 'submoduleName' and below.
            </summary>
            <param name="superModule">Module to compare to.</param>
            <param name="submoduleName">Name of the submodule.</param>
            <param name="cancelToken">Cancellation token.</param>
            <returns>the task.</returns>
        </member>
        <member name="M:GitCommands.Submodules.SubmoduleStatusProvider.SetSubmoduleEmptyDetailedStatus(GitCommands.GitModule,System.String)">
            <summary>
            Set empty submodule status for 'submoduleName' and below.
            </summary>
            <param name="superModule">The module to compare to.</param>
            <param name="submoduleName">Name of the submodule.</param>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.IRepositoryManager">
            <summary>
            Provides the ability to manage the history of git repositories used by the user.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.IRepositoryManager.AddAsMostRecentAsync(System.String)">
            <summary>
            Saves the provided repository path to the list of recently used git repositories as the top entry.
            </summary>
            <param name="repositoryPath">A repository path to be save as "most recent".</param>
            <returns>The current version of the list of recently used git repositories after the update.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryPath"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.IRepositoryManager.LoadRecentHistoryAsync">
            <summary>
            Loads the list of recently used git repositories.
            </summary>
            <returns>The list of recently used git repositories.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.IRepositoryManager.RemoveRecentAsync(System.String)">
            <summary>
            Removes <paramref name="repositoryPath"/> from the list of recently used git repositories.
            </summary>
            <param name="repositoryPath">A repository path to remove.</param>
            <returns>The current version of the list of recently used git repositories after the update.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.IRepositoryManager.SaveRecentHistoryAsync(System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Saves the list of recently used git repositories.
            </summary>
            <param name="repositoryHistory">A list of recently used git repositories.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.IRepositorySerialiser`1">
            <summary>
            Provides the ability to serialise and deserialise collections of user's git repositories.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.IRepositorySerialiser`1.Deserialize(System.String)">
            <summary>
            Restores a list of user's git repositories from the supplied string.
            </summary>
            <param name="serialised">A serialised list of user's git repositories.</param>
            <returns>A list of user's git repositories.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.IRepositorySerialiser`1.Serialize(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Serialises the given list of user's git repositories.
            </summary>
            <param name="repositories">A list of user's git repositories.</param>
            <returns>A serialised list of user's git repositories.</returns>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.Legacy.Repository">
            <summary>
            This type is necessary to provide backwards compatibility ONLY.
            </summary>
            <remarks>
            This DTO is deserialised from user settings, the order of the properties is significant.
            </remarks>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.Legacy.RepositoryCategory">
            <summary>
            This type is necessary to provide backwards compatibility ONLY.
            </summary>
            <remarks>
            This DTO is deserialised from user settings, the order of the properties is significant.
            </remarks>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.Legacy.RepositoryCategoryXmlSerialiser">
            <summary>
            Provides the ability to deserialise collections of categorised user's git repositories.
            This functionality is provided for backwards compatibility ONLY and is purposed for
            migration of categorised user's git repositories from version prior to v3.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.Legacy.RepositoryCategoryXmlSerialiser.Deserialize(System.String)">
            <summary>
            Restores a list of categorised user's git repositories from the supplied string.
            </summary>
            <param name="serialised">A serialised list of categorised user's git repositories.</param>
            <returns>A list of categorised user's git repositories.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="serialised"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.Legacy.IRepositoryHistoryMigrator">
            <summary>
            Provides the ability to migrate the collections of categorised user's git repositories
            stored in the legacy format (pre v3) to the new structure.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.Legacy.IRepositoryHistoryMigrator.MigrateAsync(System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Migrates settings from the old legacy format into the new structure.
            </summary>
            <param name="currentHistory">The current list of favourite local git repositories.</param>
            <returns>
            The list of favourite local git repositories enriched with the legacy categorised git repositories.
            <c>changed</c> is <see langword="true"/>, if the migration has taken place; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.Legacy.RepositoryHistoryMigrator">
            <summary>
            Migrate the collections of categorised user's git repositories
            stored in the legacy format (pre v3) to the new structure.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.Legacy.RepositoryHistoryMigrator.MigrateAsync(System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Migrates settings from the old legacy format into the new structure.
            </summary>
            <param name="currentHistory">The current list of favourite local git repositories.</param>
            <returns>
            The list of favourite local git repositories enriched with the legacy categorised git repositories.
            <c>changed</c> is <see langword="true"/>, if the migration has taken place; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="currentHistory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.Legacy.RepositoryHistorySurrogate">
            <summary>
            The surrogate is necessary to provide backwards compatibility.
            The original implementation persisted user's git repositories under "RepositoryHistory" root node.
            </summary>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.Legacy.IRepositoryStorage">
            <summary>
            Provides the ability to persist and retrieve collections of user's git repositories.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.Legacy.IRepositoryStorage.Load">
            <summary>
            Loads a collection of categorised user's git repositories (legacy).
            </summary>
            <returns>A collection of categorised user's git repositories.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.Legacy.IRepositoryStorage.Save">
            <summary>
            Removes the legacy categorised user's git repositories history
            after it has been migrated to the new format.
            </summary>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.Legacy.RepositoryStorage">
            <summary>
            Persists and retrieves collections of user's git repositories.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.Legacy.RepositoryStorage.Load">
            <summary>
            Loads a collection of categorised user's git repositories (legacy).
            </summary>
            <returns>A collection of categorised user's git repositories.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.Legacy.RepositoryStorage.Save">
            <summary>
            Removes the legacy collection of user's git repositories.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.ILocalRepositoryManager.AssignCategoryAsync(GitCommands.UserRepositoryHistory.Repository,System.String)">
            <summary>
            Categorises the given <paramref name="repository"/> and assigns to the list of favourites,
            if the <paramref name="category"/> is supplied; otherwise removes the repository from
            the list of favourites.
            </summary>
            <param name="repository">The repository to categorise.</param>
            <param name="category">The new category, if it is supplied.</param>
            <returns>The current version of the list of favourite git repositories after the update.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.ILocalRepositoryManager.LoadFavouriteHistoryAsync">
            <summary>
            Loads the list of favourite local git repositories from a persistent storage.
            </summary>
            <returns>The list of favourite local git repositories.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.ILocalRepositoryManager.RemoveFavouriteAsync(System.String)">
            <summary>
            Removes <paramref name="repositoryPath"/> from the the list of favourite local git repositories in a persistent storage.
            </summary>
            <param name="repositoryPath">A repository path to remove.</param>
            <returns>The current version of the list of favourite git repositories after the update.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.ILocalRepositoryManager.SaveFavouriteHistoryAsync(System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Saves the list of favourite local git repositories to a persistent storage.
            </summary>
            <param name="repositoryHistory">A list of favourite git repositories.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.ILocalRepositoryManager.RemoveInvalidRepositoriesAsync(System.Func{System.String,System.Boolean})">
            <summary>
            Removes the invalid repositories from both recent and favourite local git repositories in a persistent storage.
            </summary>
            <param name="predicate">A predicate to check against for the validity of the repositories.</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.LocalRepositoryManager">
            <summary>
            Manages the history of local git repositories.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.LocalRepositoryManager.AddAsMostRecentAsync(System.String)">
            <summary>
            <para>Saves the provided repository path to the list of recently used git repositories as the top entry.</para>
            <para>If the history contains an entry for the provided path, the entry is physically moved
            to the top of the history list.</para>
            </summary>
            <remarks>
            The history is loaded from the persistent storage to ensure the most current version of
            the history is updated, as it may have been updated by another instance of GE.
            </remarks>
            <param name="repositoryPath">A repository path to be save as "most recent".</param>
            <returns>The current version of the list of recently used git repositories after the update.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryPath"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="repositoryPath"/> is a URL.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.LocalRepositoryManager.AssignCategoryAsync(GitCommands.UserRepositoryHistory.Repository,System.String)">
            <summary>
            Categorises the given <paramref name="repository"/> and assigns to the list of favourites,
            if the <paramref name="category"/> is supplied; otherwise removes the repository from
            the list of favourites.
            </summary>
            <param name="repository">The repository to categorise.</param>
            <param name="category">The new category, if it is supplied.</param>
            <returns>The current version of the list of favourite git repositories after the update.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repository"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.LocalRepositoryManager.LoadFavouriteHistoryAsync">
            <summary>
            Loads the list of favourite local git repositories from a persistent storage.
            </summary>
            <returns>The list of favourite local git repositories.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.LocalRepositoryManager.LoadRecentHistoryAsync">
            <summary>
            Loads the list of recently used local git repositories from a persistent storage.
            </summary>
            <returns>The list of recently used local git repositories.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.LocalRepositoryManager.RemoveFavouriteAsync(System.String)">
            <summary>
            Removes <paramref name="repositoryPath"/> from the the list of favourite local git repositories in a persistent storage.
            </summary>
            <param name="repositoryPath">A repository path to remove.</param>
            <returns>The current version of the list of favourite git repositories after the update.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryPath"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.LocalRepositoryManager.RemoveRecentAsync(System.String)">
            <summary>
            Removes <paramref name="repositoryPath"/> from the the list of recently used local git repositories in a persistent storage.
            </summary>
            <param name="repositoryPath">A repository path to remove.</param>
            <returns>The current version of the list of recently used git repositories after the update.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryPath"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.LocalRepositoryManager.SaveFavouriteHistoryAsync(System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Saves the list of favourite local git repositories to a persistent storage.
            </summary>
            <param name="repositoryHistory">A list of favourite git repositories.</param>
            <returns>An awaitable task.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryHistory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.LocalRepositoryManager.SaveRecentHistoryAsync(System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Saves the list of recently used local git repositories to a persistent storage.
            </summary>
            <param name="repositoryHistory">A list of recently used git repositories.</param>
            <returns>An awaitable task.</returns>
            <remarks>The size of the history will be adjusted as per <see cref="P:GitCommands.AppSettings.RecentRepositoriesHistorySize"/> setting.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryHistory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.RemoteRepositoryManager">
            <summary>
            Manages the history of remote git repositories.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RemoteRepositoryManager.AddAsMostRecentAsync(System.String)">
            <summary>
            <para>Saves the provided repository URL to the list of recently used remote git repositories as the top entry.</para>
            <para>If the history contains an entry for the provided URL, the entry is physically moved
            to the top of the history list.</para>
            </summary>
            <remarks>
            The history is loaded from the persistent storage to ensure the most current version of
            the history is updated, as it may have been updated by another instance of GE.
            </remarks>
            <param name="repositoryPathUrl">A repository URL to be save as "most recent".</param>
            <returns>The current version of the list of recently used git repositories after the update.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryPathUrl"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RemoteRepositoryManager.LoadRecentHistoryAsync">
            <summary>
            Loads the list of recently used remote git repositories from a persistent storage.
            </summary>
            <returns>The list of recently used remote git repositories.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RemoteRepositoryManager.RemoveRecentAsync(System.String)">
            <summary>
            Removes <paramref name="repositoryPath"/> from the the list of recently used remote git repositories in a persistent storage.
            </summary>
            <param name="repositoryPath">A repository path to remove.</param>
            <returns>The current version of the list of recently used git repositories after the update.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="repositoryPath"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RemoteRepositoryManager.SaveRecentHistoryAsync(System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Saves the list of recently used remote git repositories to a persistent storage.
            </summary>
            <param name="repositoryHistory">A list of recently used remote git repositories.</param>
            <returns>An awaitable task.</returns>
            <remarks>The size of the history will be adjusted as per <see cref="P:GitCommands.AppSettings.RecentRepositoriesHistorySize"/> setting.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryHistory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.IRepositoryDescriptionProvider.Get(System.String)">
            <summary>
            Returns a short name for repository.
            If the repository contains a description it is returned,
            otherwise the last part of path is returned.
            </summary>
            <param name="repositoryDir">Path to repository.</param>
            <returns>Short name for repository.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RepositoryDescriptionProvider.Get(System.String)">
            <summary>
            Returns a short name for repository.
            If the repository contains a description it is returned,
            otherwise the last part of path is returned.
            </summary>
            <param name="repositoryDir">Path to repository.</param>
            <returns>Short name for repository.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RepositoryDescriptionProvider.ReadRepositoryDescription(System.String)">
            <summary>
            Reads repository description's first line from ".git\description" file.
            </summary>
            <param name="workingDir">Path to repository.</param>
            <returns>If the repository has description, returns that description, else returns <c>null</c>.</returns>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.RepositoryHistoryManager">
            <summary>
            Provides a convenient and centralised way of dealing with histories of local and remote repositories.
            </summary>
        </member>
        <member name="P:GitCommands.UserRepositoryHistory.RepositoryHistoryManager.Locals">
            <summary>
            Provides an access to the local repositories history manager.
            </summary>
        </member>
        <member name="P:GitCommands.UserRepositoryHistory.RepositoryHistoryManager.Remotes">
            <summary>
            Provides an access to the remote repositories history manager.
            </summary>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.IRepositoryStorage">
            <summary>
            Provides the ability to persist and retrieve collections of user's git repositories.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.IRepositoryStorage.Load(System.String)">
            <summary>
            Loads a collection of user's git repositories.
            </summary>
            <param name="key">A setting key which contains the persisted collection.</param>
            <returns>A collection of user's git repositories.</returns>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.IRepositoryStorage.Save(System.String,System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Persists the given collection of user's git repositories.
            </summary>
            <param name="key">A setting key which contains the persisted collection.</param>
            <param name="repositories">A collection of user's git repositories.</param>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.RepositoryStorage">
            <summary>
            Persists and retrieves collections of user's git repositories.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RepositoryStorage.Load(System.String)">
            <summary>
            Loads a collection of user's git repositories.
            </summary>
            <param name="key">A setting key which contains the persisted collection.</param>
            <returns>A collection of user's git repositories, if successful;
            otherwise an empty list, if the setting does not exist or the persisted value cannot be deserialised.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RepositoryStorage.Save(System.String,System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Persists the given collection of user's git repositories.
            </summary>
            <param name="key">A setting key which contains the persisted collection.</param>
            <param name="repositories">A collection of user's git repositories.</param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositories"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GitCommands.UserRepositoryHistory.RepositoryXmlSerialiser">
            <summary>
            Serialises or deserialises user's git repositories into XML.
            </summary>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RepositoryXmlSerialiser.Deserialize(System.String)">
            <summary>
            Restores a list of user's git repositories from the supplied string.
            </summary>
            <param name="serialised">A serialised list of user's git repositories.</param>
            <returns>A list of user's git repositories, if successfully deserialised; otherwise <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="serialised"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.</exception>
        </member>
        <member name="M:GitCommands.UserRepositoryHistory.RepositoryXmlSerialiser.Serialize(System.Collections.Generic.IEnumerable{GitCommands.UserRepositoryHistory.Repository})">
            <summary>
            Serialises the given list of user's git repositories.
            </summary>
            <param name="repositories">A list of user's git repositories.</param>
            <returns>A serialised list of user's git repositories, if successful; otherwise <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositories"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GitCommands.EncodingHelper">
            <summary>
            Encoding Helper
            </summary>
        </member>
        <member name="M:System.DeconstructionExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Supports C# 7 deconstruction of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
        </member>
        <member name="M:System.DeconstructionExtensions.Deconstruct``2(System.Linq.IGrouping{``0,``1},``0@,System.Collections.Generic.IEnumerable{``1}@)">
            <summary>
            Supports C# 7 deconstruction of <see cref="T:System.Linq.IGrouping`2"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.RemovePrefix(System.String,System.String,System.StringComparison)">
            <summary>
            Returns <paramref name="str"/> without <paramref name="prefix"/>.
            If <paramref name="prefix"/> is not found, <paramref name="str"/> is returned unchanged.
            </summary>
        </member>
        <member name="M:System.StringExtensions.RemoveSuffix(System.String,System.String,System.StringComparison)">
            <summary>
            Returns <paramref name="str"/> without <paramref name="suffix"/>.
            If <paramref name="suffix"/> is not found, <paramref name="str"/> is returned unchanged.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SubstringUntil(System.String,System.Char)">
            <summary>
            Returns the substring of <paramref name="str"/> up until (and excluding) the first
            instance of character <paramref name="c"/>.
            If <paramref name="c"/> is not found, <paramref name="str"/> is returned unchanged.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SubstringUntilLast(System.String,System.Char)">
            <summary>
            Returns the substring of <paramref name="str"/> up until (and excluding) the last
            instance of character <paramref name="c"/>.
            If <paramref name="c"/> is not found, <paramref name="str"/> is returned unchanged.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SubstringAfter(System.String,System.Char)">
            <summary>
            Returns the substring of <paramref name="str"/> after (and excluding) the first
            instance of character <paramref name="c"/>.
            If <paramref name="c"/> is not found, <paramref name="str"/> is returned unchanged.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SubstringAfter(System.String,System.String,System.StringComparison)">
            <summary>
            Returns the substring of <paramref name="str"/> up until (and excluding) the first
            instance of string <paramref name="s"/>.
            If <paramref name="s"/> is not found, <paramref name="str"/> is returned unchanged.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SubstringAfterLast(System.String,System.Char)">
            <summary>
            Returns the substring of <paramref name="str"/> after (and excluding) the last
            instance of character <paramref name="c"/>.
            If <paramref name="c"/> is not found, <paramref name="str"/> is returned unchanged.
            </summary>
        </member>
        <member name="M:System.StringExtensions.SubstringAfterLast(System.String,System.String,System.StringComparison)">
            <summary>
            Returns the substring of <paramref name="str"/> up until (and excluding) the last
            instance of string <paramref name="s"/>.
            If <paramref name="s"/> is not found, <paramref name="str"/> is returned unchanged.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Quote(System.String,System.String)">
            <summary>
            Quotes this string with the specified <paramref name="q"/>.
            </summary>
        </member>
        <member name="M:System.StringExtensions.QuoteNE(System.String)">
            <summary>
            Quotes this string if it is not null and not empty.
            </summary>
        </member>
        <member name="M:System.StringExtensions.AddParenthesesNE(System.String)">
            <summary>
            Adds parentheses if string is not null and not empty.
            </summary>
        </member>
        <member name="M:System.StringExtensions.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the beginning of this instance matches any of the specified strings.
            </summary>
            <param name="starts">array of strings to compare.</param>
            <returns>true if any starts element matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:System.StringExtensions.SplitLines(System.String)">
            <summary>Split a string, delimited by line-breaks, excluding empty entries.</summary>
        </member>
        <member name="M:System.StringExtensions.SplitBySpace(System.String)">
            <summary>Split a string, delimited by the space character, excluding empty entries.</summary>
        </member>
        <member name="M:System.StringExtensions.ShortenTo(System.String,System.Int32)">
            <summary>
            Shortens <paramref name="str"/> if necessary, so that the resulting string has fewer than <paramref name="maxLength"/> characters.
            If shortened, ellipsis are appended to the truncated string.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the <paramref name="other"/> occurs within <paramref name="str"/>.
            </summary>
            <param name="other">The string to seek. </param>
            <param name="stringComparison">The Comparison type.</param>
            <returns>
            true if the <paramref name="other"/> parameter occurs within <paramref name="str"/>,
            or if <paramref name="other"/> is the empty string (""); otherwise, false.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="M:GitExtensions.Strings.IsNullOrEmpty(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="M:GitExtensions.Strings.IsNullOrWhiteSpace(System.String)">
            <inheritdoc cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>
        </member>
    </members>
</doc>
