# import sys
# from PyQt5 import QtWidgets, QtCore, QtGui
# from PyQt5.QtGui import *
# from PyQt5.QtCore import *
# from PyQt5.QtWidgets import *
#
#
# class Worker(QtCore.QObject):
#     return_uid = QtCore.pyqtSignal(int)
#     finished = QtCore.pyqtSignal()
#
#     def get_uid(self):
#         print("start")
#         count = 0
#         QtCore.QThread.msleep(1000)
#         while count < 10:
#             QtCore.QThread.msleep(500)
#             self.return_uid.emit(count)
#             count += 1
#         self.finished.emit()
#
#
# class Form(QWidget):
#     def __init__(self):
#         super().__init__()
#         self.label_main = QLabel("Welcome")
#         self.label_uid = QLabel("Exit")
#
#         self.layout_main = QVBoxLayout()
# #        self.layout_access = QVBoxLayout()
#
#         self.obj = Worker()
#         self.thread = QThread()
#         self.obj.return_uid.connect(self.onCardRead)
#         self.obj.moveToThread(self.thread)
#
# #        self.obj.finished.connect(self.close)
#         self.obj.finished.connect(self.secondUI)                # <---
#
#         self.thread.started.connect(self.obj.get_uid)
#         self.thread.start()
#
#         self.initUI()
#
#     def initUI(self):
#         self.setLayout(self.layout_main)
#         self.layout_main.addWidget(self.label_main)
#         self.setWindowTitle('Main Thread')
#         self.resize(300, 100)
#         self.show()
#
#     def secondUI(self):                                         # <---
#         self.hide()
#         self.windowSecond = QWidget()
#         self.layout_access = QVBoxLayout(self.windowSecond)
#         self.layout_access.addWidget(self.label_uid)
#         self.windowSecond.setWindowTitle('Main Screen')
#         self.windowSecond.resize(300, 200)
#         self.windowSecond.show()
#
#     def onCardRead(self, id):
#         self.label_main.setNum(id)
#
#
# if __name__ == '__main__':
#     app = QApplication(sys.argv)
#     w = Form()
#     sys.exit(app.exec_())
#
# class Reader():
#     def getUsername(self):
#         username = "name"
#         return username
#
#     def getAddress(self):
#         address = 'address'
#         return address
#
#
# class DisplayInfo():
#     reader = Reader()
#     uName = reader.getUsername()
#     addr = reader.getAddress()
#     print(uName)
#     print(addr)
#
#
# DisplayInfo
# xCord="0.37312960624694824, 0.379564493894577, 0.38721704483032227, 0.3859254717826843, 0.3906187117099762, 0.3827874958515167, 0.37183865904808044, 0.2552783489227295, 0.255482941865921, 0.24069778621196747, 0.24566242098808289, 0.2475096881389618, 0.24530015885829926, 0.24880574643611908, 0.24910235404968262, 0.24831557273864746, 0.24606619775295258, 0.24573779106140137, 0.23829592764377594, 0.24000556766986847, 0.24851468205451965, 0.2604285776615143, 0.23620733618736267, 0.22130903601646423, 0.21368727087974548, 0.2026701271533966, 0.21429412066936493, 0.19559165835380554, 0.20675694942474365, 0.2296205759048462, 0.24008481204509735, 0.2380109578371048, 0.23553718626499176, 0.24010229110717773, 0.24536988139152527, 0.24777932465076447, 0.24804730713367462, 0.24855321645736694, 0.23897060751914978, 0.253427654504776, 0.21381327509880066, 0.22575034201145172, 0.22247131168842316, 0.23313021659851074, 0.24772736430168152, 0.25009194016456604, 0.24835792183876038, 0.24120551347732544, 0.24312260746955872, 0.2431698590517044, 0.23954789340496063, 0.2356172651052475, 0.23177888989448547, 0.23442624509334564, 0.23675301671028137, 0.24844536185264587, 0.2272178828716278, 0.18818692862987518, 0.16571444272994995, 0.17479267716407776, 0.19119234383106232, 0.18770736455917358, 0.22410035133361816, 0.2370206117630005, 0.2239602506160736, 0.20932647585868835, 0.20732468366622925, 0.20704233646392822, 0.20704472064971924, 0.19720900058746338, 0.21560819447040558, 0.20818722248077393, 0.21076717972755432, 0.21018953621387482, 0.21046215295791626, 0.21413664519786835, 0.22257265448570251, 0.22016845643520355, 0.22110401093959808, 0.22384394705295563, 0.221446692943573, 0.23816120624542236, 0.15560084581375122, 0.15560084581375122, 0.15278539061546326, 0.14831358194351196, 0.13381758332252502, 0.23820336163043976, 0.22297929227352142, 0.2216929793357849, 0.21748872101306915, 0.21090035140514374, 0.2011590152978897, 0.20918123424053192, 0.21219150722026825, 0.21223852038383484, 0.21271219849586487, 0.21134409308433533, 0.20861953496932983, 0.1946955919265747, 0.12180797010660172, 0.15969014167785645, 0.20581668615341187, 0.18764512240886688, 0.17881564795970917, 0.1966051161289215, 0.2110075056552887, 0.21545037627220154, 0.2417362481355667, 0.13212458789348602, 0.16970431804656982, 0.19792349636554718, 0.17562031745910645, 0.08567214757204056, 0.10557521134614944, 0.13880538940429688, 0.14972302317619324, 0.1481340378522873, 0.14999645948410034, 0.1462731808423996, 0.13930994272232056, 0.16353380680084229, 0.2111402004957199, 0.250834196805954, 0.2519475519657135, 0.2479826956987381, 0.2458215355873108, 0.2472894787788391, 0.24803385138511658, 0.24446167051792145, 0.2442234605550766, 0.2521366477012634, 0.2527322769165039, 0.25539982318878174, 0.2532220780849457, 0.24369151890277863, 0.23240292072296143, 0.22403906285762787"
# yCord= "0.8530410528182983, 0.9027919173240662, 0.9079846739768982, 0.861723780632019, 0.8646067380905151, 0.9116482734680176, 0.9774175882339478, 0.8354039192199707, 0.7986004948616028, 0.7902975082397461, 0.7880256772041321, 0.7890756726264954, 0.7814861536026001, 0.7826180458068848, 0.787024736404419, 0.7854820489883423, 0.7836806178092957, 0.7840369343757629, 0.7827533483505249, 0.78562331199646, 0.7913130521774292, 0.7649638056755066, 0.7007429003715515, 0.7517213821411133, 0.7778013944625854, 1.13783597946167, 1.0372271537780762, 0.8207955360412598, 0.8137656450271606, 0.8344948887825012, 0.8482930064201355, 0.8389154076576233, 0.8212566375732422, 0.7954429388046265, 0.7797626256942749, 0.7690382599830627, 0.7693969011306763, 0.7793581485748291, 0.7865716218948364, 0.7761278748512268, 0.9810205101966858, 0.9445024728775024, 0.8694795966148376, 0.8489932417869568, 0.8374595642089844, 0.8337663412094116, 0.8077442049980164, 0.803019642829895, 0.796058714389801, 0.7835351824760437, 0.7681434154510498, 0.7664339542388916, 0.7668113708496094, 0.7729746699333191, 0.8026854395866394, 0.8354063630104065, 0.8721835017204285, 0.889622151851654, 1.0909984111785889, 1.0617399215698242, 0.9701138734817505, 0.9693853855133057, 0.8266473412513733, 0.8070751428604126, 0.757652223110199, 0.7108290195465088, 0.6751535534858704, 0.6736852526664734, 0.7010114789009094, 0.7292338013648987, 0.6771000623703003, 0.7015923261642456, 0.7013878226280212, 0.6981908679008484, 0.6970115900039673, 0.6774141192436218, 0.6404476761817932, 0.6246161460876465, 0.6230556964874268, 0.6273922920227051, 0.6339369416236877, 0.6042395234107971, 0.6382869482040405, 0.6382869482040405, 0.5921311378479004, 0.5805937051773071, 0.5431936383247375, 0.3971973955631256, 0.4116441309452057, 0.4094083905220032, 0.42915475368499756, 0.516782820224762, 0.6422261595726013, 0.6622487902641296, 0.6622039675712585, 0.6662588119506836, 0.6754269599914551, 0.6699807643890381, 0.6855299472808838, 0.7289677858352661, 1.1235132217407227, 1.0477350950241089, 0.8802851438522339, 0.8866807818412781, 0.9621178507804871, 0.9322322010993958, 0.8834425806999207, 0.8931116461753845, 0.9033542275428772, 1.1726747751235962, 1.0693094730377197, 0.9536274075508118, 0.9972128868103027, 0.8144848942756653, 0.7939051389694214, 0.8155660033226013, 0.819310188293457, 0.7653985619544983, 0.7437744140625, 0.7299689054489136, 0.7156592011451721, 0.721964418888092, 0.7674559354782104, 0.8001989722251892, 0.7916237711906433, 0.8138106465339661, 0.8103366494178772, 0.8089319467544556, 0.8125744462013245, 0.8181414008140564, 0.8228087425231934, 0.828064501285553, 0.8274712562561035, 0.7894830703735352, 0.7966547608375549, 0.8223433494567871, 0.8367429971694946, 0.8643991351127625"
#
# with  open("cords.txt", "w") as file:
#     file.write('{}\n{}\n'.format(xCord,yCord))
# file.close()

import sys
import threading
import time
import sys
from pprint import pprint as pp

from PyQt5.QtGui import QPixmap, QFont
from PyQt5.QtWidgets import QWidget, QGridLayout, QPushButton, QSizePolicy, QApplication, QGroupBox, QLabel, \
    QFormLayout, QLineEdit, QVBoxLayout, QRadioButton, QMainWindow, QHBoxLayout
from PyQt5.uic.properties import QtCore
from PyQt5.QtCore import Qt
import tobii_research as tr
import random
import time
import tkinter as tk                # python 3
from tkinter import font as tkfont  # python 3
import sys
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy
import tobii_research as tr
import seaborn as sb
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from PIL import Image, ImageTk
import pandas as pd
import joblib
from past.builtins import execfile
import past.builtins
import numpy as np

from matplotlib.backends.qt_compat import QtWidgets
from matplotlib.backends.backend_qtagg import ( NavigationToolbar2QT as NavigationToolbar)
from matplotlib.figure import Figure

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

from PyQt5.QtWidgets import *
import sys
from pprint import pprint as pp

from PyQt5.QtGui import QPixmap, QFont
from PyQt5.QtWidgets import QWidget, QGridLayout, QPushButton, QSizePolicy, QApplication, QGroupBox, QLabel, \
    QFormLayout, QLineEdit, QVBoxLayout, QRadioButton
from PyQt5.uic.properties import QtCore
from PyQt5.QtCore import Qt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import seaborn as sb

def xcord():
    with open('cords.txt', 'r') as f:
        content_list = [line.rstrip('\n') for line in f]
        ok1= content_list[0]
        print(type(ok1))
        ok2=eval(ok1)
        x=list(ok2)
        print(type(x))

        # all=f.read().splitlines()
        # # s=all.split('\n')
        # for line in all:
        #     print(line)
        #     xline=line

        # print(type(all))
    # z=eval(s)
    # x=list(z)
    # print(type(x))

def ycord():
    with open('cords.txt', 'r') as f:
        last_line = f.readlines()[-1]
        ycord=last_line
        # converted=int(ycord)
    # ycon=ycord
    x=eval(ycord)
    y=list(x)
    print(type(y))


# ok=[0.37312960624694824, 0.379564493894577, 0.38721704483032227, 0.3859254717826843, 0.3906187117099762, 0.3827874958515167, 0.37183865904808044, 0.2552783489227295, 0.255482941865921, 0.24069778621196747, 0.24566242098808289, 0.2475096881389618, 0.24530015885829926, 0.24880574643611908, 0.24910235404968262, 0.24831557273864746, 0.24606619775295258, 0.24573779106140137, 0.23829592764377594, 0.24000556766986847, 0.24851468205451965, 0.2604285776615143, 0.23620733618736267, 0.22130903601646423, 0.21368727087974548, 0.2026701271533966, 0.21429412066936493, 0.19559165835380554, 0.20675694942474365, 0.2296205759048462, 0.24008481204509735, 0.2380109578371048, 0.23553718626499176, 0.24010229110717773, 0.24536988139152527, 0.24777932465076447, 0.24804730713367462, 0.24855321645736694, 0.23897060751914978, 0.253427654504776, 0.21381327509880066, 0.22575034201145172, 0.22247131168842316, 0.23313021659851074, 0.24772736430168152, 0.25009194016456604, 0.24835792183876038, 0.24120551347732544, 0.24312260746955872, 0.2431698590517044, 0.23954789340496063, 0.2356172651052475, 0.23177888989448547, 0.23442624509334564, 0.23675301671028137, 0.24844536185264587, 0.2272178828716278, 0.18818692862987518, 0.16571444272994995, 0.17479267716407776, 0.19119234383106232, 0.18770736455917358, 0.22410035133361816, 0.2370206117630005, 0.2239602506160736, 0.20932647585868835, 0.20732468366622925, 0.20704233646392822, 0.20704472064971924, 0.19720900058746338, 0.21560819447040558, 0.20818722248077393, 0.21076717972755432, 0.21018953621387482, 0.21046215295791626, 0.21413664519786835, 0.22257265448570251, 0.22016845643520355, 0.22110401093959808, 0.22384394705295563, 0.221446692943573, 0.23816120624542236, 0.15560084581375122, 0.15560084581375122, 0.15278539061546326, 0.14831358194351196, 0.13381758332252502, 0.23820336163043976, 0.22297929227352142, 0.2216929793357849, 0.21748872101306915, 0.21090035140514374, 0.2011590152978897, 0.20918123424053192, 0.21219150722026825, 0.21223852038383484, 0.21271219849586487, 0.21134409308433533, 0.20861953496932983, 0.1946955919265747, 0.12180797010660172, 0.15969014167785645, 0.20581668615341187, 0.18764512240886688, 0.17881564795970917, 0.1966051161289215, 0.2110075056552887, 0.21545037627220154, 0.2417362481355667, 0.13212458789348602, 0.16970431804656982, 0.19792349636554718, 0.17562031745910645, 0.08567214757204056, 0.10557521134614944, 0.13880538940429688, 0.14972302317619324, 0.1481340378522873, 0.14999645948410034, 0.1462731808423996, 0.13930994272232056, 0.16353380680084229, 0.2111402004957199, 0.250834196805954, 0.2519475519657135, 0.2479826956987381, 0.2458215355873108, 0.2472894787788391, 0.24803385138511658, 0.24446167051792145, 0.2442234605550766, 0.2521366477012634, 0.2527322769165039, 0.25539982318878174, 0.2532220780849457, 0.24369151890277863, 0.23240292072296143, 0.22403906285762787]
# print(type(ok))
# xcord()



class okk(QWidget):
    def __init__(self):
        super().__init__()
        self.horizontalGroupBox = QGroupBox("Grid")
        self.layoutGrid = QGridLayout()
        self.setLayout(self.layoutGrid)
        self.layoutGrid.setVerticalSpacing(50)
        self.layoutGrid.setHorizontalSpacing(50)
        # layoutGrid.setContentsMargins(50, 50, 50, 50)
        self.setMinimumHeight(890)
        self.setMinimumWidth(1500)
        self.showMaximized()

        #get x & y coordinate ,read from txt file
        def xcord():
            with open('cords.txt', 'r') as f:
                content_list = [line.rstrip('\n') for line in f]
                ok1= content_list[0]
                print(type(ok1))
                ok2=eval(ok1)
                x=list(ok2)
                print(type(x))
            return x
        def ycord():
            with open('cords.txt', 'r') as f:
                last_line = f.readlines()[-1]
                ycord=last_line
            x=eval(ycord)
            y=list(x)
            print(type(y))
            return y

        x=xcord()
        y=ycord()
        print("x",x)
        print("y",y)

        counter = 0
        mp_img = mpimg.imread("whatsfordinner1xx.png")

        fig =plt.figure()
        ax = fig.add_axes([0, 0, 1, 1]) #places a figure in the canvas that is exactly as large as the canvas itself.

        # finding the coordinates of the y n x
        # plotting heat map with x and y coordinates
        test = sb.kdeplot(x, y, shade=True, cmap="Reds", alpha=0.7)
        test.collections[0].set_alpha(0)
        plt.imshow(mp_img, zorder=0, extent=[0, 1, 0, 1], origin='lower', aspect='auto')
        ax.invert_yaxis()
        plt.axis('off')
        canvas = FigureCanvas(fig)  # A tk.DrawingArea.
        canvas.draw()
        self.layoutGrid.addWidget(canvas)



if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    # app.setStyleSheet(stylesheet)     # <---
    window = okk()
    window.resize(640, 640)
    window.show()
    # t = threading.Thread(target=window.capturefood)# so that the ui display first then scan the eyes
    # t.start()


    sys.exit(app.exec_())
